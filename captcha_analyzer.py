#!/usr/bin/env python3
"""
–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –∫–∞–ø—á —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º multimodal –º–æ–¥–µ–ª–µ–π.
–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ª—é–±—ã–µ —Ç–∏–ø—ã –∑–∞–¥–∞–Ω–∏–π hCaptcha –∏ –¥–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–µ—à–µ–Ω–∏—è.
"""

import torch
from PIL import Image
from pathlib import Path
import json
from datetime import datetime


class CaptchaAnalyzer:
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –∫–∞–ø—á —Å multimodal –º–æ–¥–µ–ª—å—é"""
    
    def __init__(self):
        self.device = "cuda" if torch.cuda.is_available() else "cpu"
        self.processor = None
        self.model = None
        self.model_loaded = False
        
        print(f"ü§ñ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ –∫–∞–ø—á –Ω–∞ {self.device}")
        
    def load_model(self, model_name="Salesforce/blip2-opt-2.7b"):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç multimodal –º–æ–¥–µ–ª—å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"""
        try:
            print(f"üì¶ –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ {model_name}...")
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –º–æ–¥–µ–ª–∏ –∏ –≤—ã–±–∏—Ä–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –∫–ª–∞—Å—Å
            if "blip2" in model_name.lower():
                from transformers import AutoProcessor, Blip2ForConditionalGeneration
                model_class = Blip2ForConditionalGeneration
            elif "llava" in model_name.lower():
                from transformers import AutoProcessor, LlavaForConditionalGeneration  
                model_class = LlavaForConditionalGeneration
            elif "kosmos" in model_name.lower():
                from transformers import AutoProcessor, Kosmos2ForConditionalGeneration
                model_class = Kosmos2ForConditionalGeneration
            else:
                # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø—Ä–æ–±—É–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥
                from transformers import AutoProcessor, AutoModelForVision2Seq
                model_class = AutoModelForVision2Seq
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä
            self.processor = AutoProcessor.from_pretrained(model_name)
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±–ª–µ–≥—á–µ–Ω–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è CPU/GPU
            model_kwargs = {
                "torch_dtype": torch.float16 if self.device == "cuda" else torch.float32,
            }
            
            # –î–ª—è GPU –¥–æ–±–∞–≤–ª—è–µ–º device_map
            if self.device == "cuda":
                model_kwargs["device_map"] = "auto"
                
                # –ü—Ä–æ–±—É–µ–º –¥–æ–±–∞–≤–∏—Ç—å –∫–≤–∞–Ω—Ç–∏–∑–∞—Ü–∏—é –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –ø–∞–º—è—Ç–∏
                try:
                    from transformers import BitsAndBytesConfig
                    quantization_config = BitsAndBytesConfig(
                        load_in_4bit=True,
                        bnb_4bit_compute_dtype=torch.float16
                    )
                    model_kwargs["quantization_config"] = quantization_config
                    print("üîß –ò—Å–ø–æ–ª—å–∑—É–µ–º 4-bit –∫–≤–∞–Ω—Ç–∏–∑–∞—Ü–∏—é")
                except ImportError:
                    print("‚ö†Ô∏è BitsAndBytesConfig –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º float16")
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å
            self.model = model_class.from_pretrained(model_name, **model_kwargs)
            
            # –î–ª—è CPU —è–≤–Ω–æ –ø–µ—Ä–µ–º–µ—â–∞–µ–º –º–æ–¥–µ–ª—å
            if self.device == "cpu":
                self.model = self.model.to("cpu")
            
            self.model_loaded = True
            print("‚úÖ –ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
            
        except ImportError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
            print("üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ: pip install transformers[torch] accelerate")
            return False
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏: {e}")
            return False
            
        return True
        
    def analyze_captcha(self, image_path, prompt=None):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–∞–ø—á—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ—à–µ–Ω–∏–µ"""
        if not self.model_loaded:
            print("‚ùå –ú–æ–¥–µ–ª—å –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞!")
            return None
            
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            image = Image.open(image_path)
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –º–æ–¥–µ–ª–∏ –¥–ª—è –∞–¥–∞–ø—Ç–∞—Ü–∏–∏ –ø—Ä–æ–º–ø—Ç–∞
            model_name = getattr(self.model, 'name_or_path', 'unknown')
            
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            if prompt is None:
                prompt = self._create_analysis_prompt(model_name)
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ–º–ø—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –º–æ–¥–µ–ª–∏
            
            if "blip2" in model_name.lower():
                # BLIP2 –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ø—Ä–æ—Å—Ç—ã–µ –ø—Ä–æ–º–ø—Ç—ã
                full_prompt = f"Describe this captcha challenge: {prompt}"
                inputs = self.processor(images=image, text=full_prompt, return_tensors="pt").to(self.device)
                
            elif "kosmos" in model_name.lower():
                # Kosmos-2 –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ñ–æ—Ä–º–∞—Ç <image> + —Ç–µ–∫—Å—Ç
                full_prompt = f"<image> {prompt}"
                inputs = self.processor(text=full_prompt, images=image, return_tensors="pt").to(self.device)
                
            else:
                # LLaVA –∏ –¥—Ä—É–≥–∏–µ –º–æ–¥–µ–ª–∏
                full_prompt = f"USER: <image>\n{prompt}\nASSISTANT:"
                inputs = self.processor(full_prompt, images=image, return_tensors="pt").to(self.device)
            
            print("üß† –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–ø—á—É...")
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —Å –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
            with torch.no_grad():
                if "blip2" in model_name.lower():
                    # BLIP2 —Ç—Ä–µ–±—É–µ—Ç –æ—Å–æ–±—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
                    output = self.model.generate(
                        **inputs,
                        max_length=512,
                        num_beams=4,
                        early_stopping=True,
                        do_sample=False
                    )
                else:
                    # –î–ª—è –¥—Ä—É–≥–∏—Ö –º–æ–¥–µ–ª–µ–π
                    output = self.model.generate(
                        **inputs,
                        max_new_tokens=512,
                        do_sample=True,
                        temperature=0.1,
                        top_p=0.9,
                        pad_token_id=self.processor.tokenizer.pad_token_id if hasattr(self.processor, 'tokenizer') else None
                    )
            
            # –î–µ–∫–æ–¥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            generated_text = self.processor.decode(output[0], skip_special_tokens=True)
            
            print(f"üîç –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: {generated_text[:200]}...")
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Ç–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –º–æ–¥–µ–ª–∏
            if "blip2" in model_name.lower():
                # BLIP2 —Å—Ä–∞–∑—É –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç
                response = generated_text.strip()
                # –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–º–ø—Ç –µ—Å–ª–∏ –æ–Ω –æ—Å—Ç–∞–ª—Å—è –≤ –Ω–∞—á–∞–ª–µ
                if full_prompt in response:
                    response = response.replace(full_prompt, "").strip()
                    
            elif "kosmos" in model_name.lower():
                # Kosmos-2 –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–æ—Å–ª–µ –ø—Ä–æ–º–ø—Ç–∞
                response = generated_text.split(full_prompt)[-1].strip() if full_prompt in generated_text else generated_text.strip()
                
            else:
                # LLaVA - –∏—â–µ–º –æ—Ç–≤–µ—Ç –ø–æ—Å–ª–µ ASSISTANT:
                if "ASSISTANT:" in generated_text:
                    response = generated_text.split("ASSISTANT:")[-1].strip()
                else:
                    response = generated_text.split(full_prompt)[-1].strip() if full_prompt in generated_text else generated_text.strip()
            
            # –û—á–∏—â–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤
            response = response.replace("<|endoftext|>", "").strip()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ—Ç–≤–µ—Ç –Ω–µ –ø—É—Å—Ç–æ–π –∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ø—Ä–æ–º–ø—Ç–æ–º
            if not response or response == full_prompt or len(response) < 10:
                print("‚ö†Ô∏è –ú–æ–¥–µ–ª—å –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç")
                response = f"–ú–æ–¥–µ–ª—å {model_name} –Ω–µ —Å–º–æ–≥–ª–∞ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –ü–æ–ª–Ω—ã–π –≤—ã–≤–æ–¥: {generated_text}"
            
            return response
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}")
            return None
    
    def _create_analysis_prompt(self, model_name=""):
        """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ–º–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫–∞–ø—á–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –º–æ–¥–µ–ª–∏"""
        if "blip2" in model_name.lower():
            # –ö–æ—Ä–æ—Ç–∫–∏–π –ø—Ä–æ–º–ø—Ç –¥–ª—è BLIP2
            return """Analyze this captcha challenge. Describe:
- TYPE: what kind of task is this?
- INSTRUCTION: what text instruction is given?
- OBJECTS: what objects do you see?
- SOLUTION: how to solve this captcha?"""
        
        else:
            # –ü–æ–ª–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –¥—Ä—É–≥–∏—Ö –º–æ–¥–µ–ª–µ–π
            return """–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Ä–µ—à–µ–Ω–∏—é –∫–∞–ø—á. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞–ø—á–∏ –∏ –æ—Ç–≤–µ—Ç—å –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã:

1. –ö–∞–∫–æ–π —Ç–∏–ø –∑–∞–¥–∞–Ω–∏—è —Ç—ã –≤–∏–¥–∏—à—å? (–≤—ã–±–æ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π, —Ç–µ–∫—Å—Ç–æ–≤–∞—è –∫–∞–ø—á–∞, –¥–≤–∏–∂—É—â–∏–µ—Å—è –æ–±—ä–µ–∫—Ç—ã, –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞, –∏ —Ç.–¥.)

2. –ö–∞–∫–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é? (–µ—Å–ª–∏ –µ—Å—Ç—å —Ç–µ–∫—Å—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏)

3. –ß—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –¥–ª—è —Ä–µ—à–µ–Ω–∏—è —ç—Ç–æ–π –∫–∞–ø—á–∏?

4. –ö–∞–∫–∏–µ –æ–±—ä–µ–∫—Ç—ã –∏–ª–∏ —ç–ª–µ–º–µ–Ω—Ç—ã —Ç—ã –≤–∏–¥–∏—à—å –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏?

5. –î–∞–π –ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–µ—à–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
   - –¢–ò–ü: [—Ç–∏–ø –∫–∞–ø—á–∏]
   - –ò–ù–°–¢–†–£–ö–¶–ò–Ø: [—á—Ç–æ –Ω–∞–ø–∏—Å–∞–Ω–æ –≤ –∑–∞–¥–∞–Ω–∏–∏]
   - –†–ï–®–ï–ù–ò–ï: [–ø–æ—à–∞–≥–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —á—Ç–æ –Ω—É–∂–Ω–æ –¥–µ–ª–∞—Ç—å]
   - –û–ë–™–ï–ö–¢–´: [—Å–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤]

–ë—É–¥—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Ç–æ—á–Ω—ã–º –∏ –ø–æ–¥—Ä–æ–±–Ω—ã–º –≤ –æ–ø–∏—Å–∞–Ω–∏–∏."""

    def save_analysis(self, image_path, analysis_result, solutions_dir="solutions"):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –≤ —Ñ–∞–π–ª"""
        try:
            # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è —Ä–µ—à–µ–Ω–∏–π
            solutions_path = Path(solutions_dir)
            solutions_path.mkdir(exist_ok=True)
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–º–µ–Ω–∞ —Ñ–∞–π–ª–æ–≤ (–∑–∞–º–µ–Ω—è—é—Ç—Å—è –ø—Ä–∏ –∫–∞–∂–¥–æ–º –∑–∞–ø—É—Å–∫–µ)
            timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            
            # –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            analysis_data = {
                "timestamp": timestamp,
                "image_path": str(image_path),
                "analysis": analysis_result,
                "model_info": {
                    "device": self.device,
                    "model_loaded": self.model_loaded
                }
            }
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
            json_path = solutions_path / "analysis.json"
            with open(json_path, 'w', encoding='utf-8') as f:
                json.dump(analysis_data, f, ensure_ascii=False, indent=2)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ —á—Ç–µ–Ω–∏—è
            txt_path = solutions_path / "solution.txt"
            with open(txt_path, 'w', encoding='utf-8') as f:
                f.write(f"–ê–ù–ê–õ–ò–ó –ö–ê–ü–ß–ò\n")
                f.write(f"{'='*50}\n")
                f.write(f"–í—Ä–µ–º—è: {timestamp}\n")
                f.write(f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {image_path}\n")
                f.write(f"{'='*50}\n\n")
                f.write(analysis_result)
            
            print(f"üíæ –ê–Ω–∞–ª–∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω:")
            print(f"   üìã JSON: {json_path}")
            print(f"   üìÑ TXT:  {txt_path}")
            
            return str(txt_path)
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
            return None


def analyze_captcha_image(image_path):
    """–£–¥–æ–±–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    analyzer = CaptchaAnalyzer()
    
    # –ü—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥–µ–ª–∏ –ø–æ –ø–æ—Ä—è–¥–∫—É (–æ—Ç –ø—Ä–æ—Å—Ç—ã—Ö –∫ —Å–ª–æ–∂–Ω—ã–º)
    models_to_try = [
        "Salesforce/blip2-opt-2.7b",           # –°–∞–º–∞—è –ª–µ–≥–∫–∞—è –º–æ–¥–µ–ª—å
        "llava-hf/llava-1.5-7b-hf",           # –û—Å–Ω–æ–≤–Ω–∞—è –º–æ–¥–µ–ª—å  
        "microsoft/kosmos-2-patch14-224"       # –†–µ–∑–µ—Ä–≤–Ω–∞—è –º–æ–¥–µ–ª—å
    ]
    
    model_loaded = False
    for model_name in models_to_try:
        print(f"üîÑ –ü—Ä–æ–±—É–µ–º –º–æ–¥–µ–ª—å: {model_name}")
        if analyzer.load_model(model_name):
            model_loaded = True
            break
        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å {model_name}, –ø—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â—É—é...")
    
    if not model_loaded:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∏ –æ–¥–Ω—É –º–æ–¥–µ–ª—å!")
        return None
        
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    result = analyzer.analyze_captcha(image_path)
    
    if result:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        solution_path = analyzer.save_analysis(image_path, result)
        return solution_path
    
    return None


if __name__ == "__main__":
    import sys
    
    if len(sys.argv) != 2:
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python captcha_analyzer.py <–ø—É—Ç—å_–∫_–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é>")
        sys.exit(1)
        
    image_path = sys.argv[1]
    
    if not Path(image_path).exists():
        print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {image_path}")
        sys.exit(1)
        
    print(f"üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–ø—á—É: {image_path}")
    result = analyze_captcha_image(image_path)
    
    if result:
        print(f"‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω! –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: {result}")
    else:
        print("‚ùå –ê–Ω–∞–ª–∏–∑ –Ω–µ —É–¥–∞–ª—Å—è")
