#!/usr/bin/env python3
"""
–í–∏–∑—É–∞–ª—å–Ω—ã–π –æ—Ç–ª–∞–¥—á–∏–∫ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –∫–∞–ø—á–∏.
–°–æ–∑–¥–∞–µ—Ç –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —Å–µ—Ç–∫–æ–π –∏ —Ä–∞–∑–º–µ—Ä–∞–º–∏ —è—á–µ–µ–∫.
"""

import time
from pathlib import Path
from playwright.sync_api import sync_playwright
from PIL import Image, ImageDraw, ImageFont
import json


def create_visual_debug():
    """–°–æ–∑–¥–∞–µ—Ç –≤–∏–∑—É–∞–ª—å–Ω—É—é –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç"""
    
    # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º —Å–≤–µ–∂–∏–π —Å–∫—Ä–∏–Ω—à–æ—Ç
    with sync_playwright() as playwright:
        browser = playwright.chromium.launch(headless=False)
        
        try:
            page = browser.new_page()
            page.goto("http://127.0.0.1:5000", wait_until="load")
            
            # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–∞–ø—á—É
            page.wait_for_selector('iframe[title*="—Ñ–ª–∞–∂–∫–æ–º"]', timeout=10000)
            checkbox_frame = page.frame_locator('iframe[title*="—Ñ–ª–∞–∂–∫–æ–º"]')
            checkbox_frame.locator('#checkbox').click()
            time.sleep(5)
            
            # –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç
            challenge_frame = page.frame_locator('iframe[title*="—Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –∏—Å–ø—ã—Ç–∞–Ω–∏—è"]')
            screenshot_path = Path("analysis/debug_captcha.png")
            challenge_frame.locator('.challenge-container').screenshot(path=str(screenshot_path))
            print(f"üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏: {screenshot_path}")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞: {e}")
            return
        finally:
            browser.close()
    
    # –¢–µ–ø–µ—Ä—å —Ä–∏—Å—É–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        img = Image.open(screenshot_path)
        width, height = img.size
        
        print(f"üìê –†–∞–∑–º–µ—Ä—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {width}x{height}")
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –¥–ª—è —Ä–∏—Å–æ–≤–∞–Ω–∏—è
        debug_img = img.copy()
        draw = ImageDraw.Draw(debug_img)
        
        # –ü—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å —à—Ä–∏—Ñ—Ç
        try:
            font = ImageFont.truetype("arial.ttf", 14)
            big_font = ImageFont.truetype("arial.ttf", 18)
        except:
            try:
                font = ImageFont.load_default()
                big_font = ImageFont.load_default()
            except:
                font = None
                big_font = None
        
        # –ù–æ–≤—ã–µ –æ—Ç–∫–∞–ª–∏–±—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã (—Ñ–∏–Ω–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è)
        grid_coords = [
            (100, 140), (250, 140), (400, 140),  # –†—è–¥ 1
            (100, 270), (250, 270), (400, 270),  # –†—è–¥ 2
            (100, 400), (250, 400), (400, 400)   # –†—è–¥ 3
        ]
        
        colors = [
            "#FF0000", "#FF8000", "#FFFF00",  # –ö—Ä–∞—Å–Ω—ã–π, –æ—Ä–∞–Ω–∂–µ–≤—ã–π, –∂–µ–ª—Ç—ã–π
            "#00FF00", "#0080FF", "#8000FF",  # –ó–µ–ª–µ–Ω—ã–π, —Å–∏–Ω–∏–π, —Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π  
            "#FF00FF", "#00FFFF", "#FF0080"   # –ü—É—Ä–ø—É—Ä–Ω—ã–π, –≥–æ–ª—É–±–æ–π, —Ä–æ–∑–æ–≤—ã–π
        ]
        
        # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º—ã–µ —Ä–∞–∑–º–µ—Ä—ã —è—á–µ–µ–∫ (–Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π —Å–µ—Ç–∫–∏ 3x3)
        cell_width = 110   # –ü—Ä–∏–º–µ—Ä–Ω–∞—è —à–∏—Ä–∏–Ω–∞ —è—á–µ–π–∫–∏
        cell_height = 90   # –ü—Ä–∏–º–µ—Ä–Ω–∞—è –≤—ã—Å–æ—Ç–∞ —è—á–µ–π–∫–∏
        
        print(f"üéØ –†–∏—Å—É–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫—É—é —Å–µ—Ç–∫—É...")
        print(f"üìè –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º—ã–π —Ä–∞–∑–º–µ—Ä —è—á–µ–π–∫–∏: {cell_width}x{cell_height}px")
        
        # –†–∏—Å—É–µ–º –∫–∞–∂–¥—É—é —è—á–µ–π–∫—É
        for i, (center_x, center_y) in enumerate(grid_coords):
            color = colors[i]
            
            # –ì—Ä–∞–Ω–∏—Ü—ã —è—á–µ–π–∫–∏ (–ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫ –≤–æ–∫—Ä—É–≥ —Ü–µ–Ω—Ç—Ä–∞)
            left = center_x - cell_width // 2
            top = center_y - cell_height // 2
            right = center_x + cell_width // 2
            bottom = center_y + cell_height // 2
            
            # –†–∏—Å—É–µ–º –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫ —è—á–µ–π–∫–∏
            draw.rectangle([left, top, right, bottom], outline=color, width=3)
            
            # –†–∏—Å—É–µ–º —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—É—é —Ç–æ—á–∫—É
            point_size = 8
            draw.ellipse([center_x-point_size, center_y-point_size, 
                         center_x+point_size, center_y+point_size], 
                        fill=color, outline="white", width=2)
            
            # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º –Ω–æ–º–µ—Ä —è—á–µ–π–∫–∏
            if font:
                draw.text((center_x-5, center_y-25), f"{i}", fill=color, font=big_font)
            
            # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
            coord_text = f"({center_x},{center_y})"
            if font:
                draw.text((center_x-30, center_y+15), coord_text, fill=color, font=font)
            
            # –†–∞–∑–º–µ—Ä—ã —è—á–µ–π–∫–∏
            size_text = f"{cell_width}x{cell_height}"
            if font:
                draw.text((left+5, top+5), size_text, fill=color, font=font)
            
            print(f"   [{i}] –¶–µ–Ω—Ç—Ä: ({center_x},{center_y}) | –ì—Ä–∞–Ω–∏—Ü—ã: ({left},{top})-({right},{bottom})")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        if font:
            draw.text((10, 10), f"–†–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {width}x{height}", fill="red", font=big_font)
            draw.text((10, height-30), f"–†–∞–∑–º–µ—Ä —è—á–µ–π–∫–∏: {cell_width}x{cell_height}", fill="red", font=big_font)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        debug_path = Path("analysis/debug_grid.png")
        debug_img.save(debug_path)
        
        print(f"\n‚úÖ –í–∏–∑—É–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–æ–∑–¥–∞–Ω–∞: {debug_path}")
        print(f"üîç –í —Ñ–∞–π–ª–µ –ø–æ–∫–∞–∑–∞–Ω–æ:")
        print(f"   üìç –¶–≤–µ—Ç–Ω—ã–µ —Ç–æ—á–∫–∏ - —Ü–µ–Ω—Ç—Ä—ã –Ω–∞—à–∏—Ö –∫–ª–∏–∫–æ–≤")
        print(f"   üî≤ –¶–≤–µ—Ç–Ω—ã–µ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∏ - –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º—ã–µ –≥—Ä–∞–Ω–∏—Ü—ã —è—á–µ–µ–∫")
        print(f"   üìè –†–∞–∑–º–µ—Ä—ã –∫–∞–∂–¥–æ–π —è—á–µ–π–∫–∏ –≤ –ø–∏–∫—Å–µ–ª—è—Ö")
        print(f"   üìã –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ü–µ–Ω—Ç—Ä–æ–≤")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å–µ—Ç–∫–∏
        grid_data = {
            "image_size": [width, height],
            "cell_size": [cell_width, cell_height], 
            "grid_coordinates": grid_coords,
            "colors": colors,
            "status": "debug_generated"
        }
        
        grid_file = Path("analysis/grid_debug.json")
        with open(grid_file, 'w') as f:
            json.dump(grid_data, f, indent=2)
        
        print(f"üíæ –î–∞–Ω–Ω—ã–µ —Å–µ—Ç–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {grid_file}")
        
        print(f"\nüìã –ê–ù–ê–õ–ò–ó –í–ò–ó–£–ê–õ–¨–ù–û–ô –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò:")
        print(f"1. –û—Ç–∫—Ä–æ–π—Ç–µ {debug_path} –≤ –ª—é–±–æ–º –ø—Ä–æ—Å–º–æ—Ç—Ä—â–∏–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
        print(f"2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–ø–∞–¥–∞—é—Ç –ª–∏ —Ü–≤–µ—Ç–Ω—ã–µ —Ç–æ—á–∫–∏ –≤ —Ü–µ–Ω—Ç—Ä—ã —Ä–µ–∞–ª—å–Ω—ã—Ö —è—á–µ–µ–∫")
        print(f"3. –ï—Å–ª–∏ –Ω–µ—Ç - –Ω—É–∂–Ω–æ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏–ª–∏ —Ä–∞–∑–º–µ—Ä—ã —è—á–µ–µ–∫")
        print(f"4. –¶–≤–µ—Ç–Ω—ã–µ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∏ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç –Ω–∞—à–∏ –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º—ã–µ –æ–±–ª–∞—Å—Ç–∏ –∫–ª–∏–∫–∞")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–∑—É–∞–ª—å–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: {e}")


def analyze_cell_sizes():
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã —è—á–µ–µ–∫"""
    print(f"\nüî¨ –ê–ù–ê–õ–ò–ó –†–ê–ó–ú–ï–†–û–í –Ø–ß–ï–ï–ö:")
    print(f"üìê –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã hCaptcha:")
    print(f"   –û–±—â–∞—è –æ–±–ª–∞—Å—Ç—å: 500x430px")
    print(f"   –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è —Å–≤–µ—Ä—Ö—É: ~60px")
    print(f"   –†–∞–±–æ—á–∞—è –æ–±–ª–∞—Å—Ç—å: 500x370px")
    print(f"   –°–µ—Ç–∫–∞ 3x3: ~150x120px –Ω–∞ —è—á–µ–π–∫—É")
    
    # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã —è—á–µ–µ–∫ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    alternative_sizes = [
        (150, 120, "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π"),
        (140, 110, "–ö–æ–º–ø–∞–∫—Ç–Ω—ã–π"),
        (160, 130, "–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π"),
        (130, 100, "–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π")
    ]
    
    print(f"\nüìè –í–ê–†–ò–ê–ù–¢–´ –†–ê–ó–ú–ï–†–û–í –Ø–ß–ï–ï–ö:")
    for w, h, desc in alternative_sizes:
        total_width = w * 3
        total_height = h * 3
        print(f"   {desc}: {w}x{h}px (–æ–±—â–∞—è —Å–µ—Ç–∫–∞: {total_width}x{total_height}px)")


if __name__ == "__main__":
    print("üîç –í–∏–∑—É–∞–ª—å–Ω—ã–π –æ—Ç–ª–∞–¥—á–∏–∫ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –∫–∞–ø—á–∏")
    print("="*45)
    
    create_visual_debug()
    analyze_cell_sizes()
    
    print(f"\nüí° –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:")
    print(f"1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ debug_grid.png - –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ª–∏ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω—ã —Ç–æ—á–∫–∏")
    print(f"2. –ï—Å–ª–∏ –Ω–µ—Ç - —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–π—Ç–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ gpt_analyzer.py") 
    print(f"3. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ —Ä–∞–∑–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã —è—á–µ–µ–∫ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ")
