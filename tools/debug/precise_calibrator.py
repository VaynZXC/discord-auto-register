#!/usr/bin/env python3
"""
–¢–æ—á–Ω–∞—è –∫–∞–ª–∏–±—Ä–æ–≤–∫–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç hCaptcha —Å –ø–æ—à–∞–≥–æ–≤–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π.
"""

import time
from pathlib import Path
from playwright.sync_api import sync_playwright


def precise_coordinate_mapping():
    """–¢–æ—á–Ω–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç —Å–µ—Ç–∫–∏"""
    with sync_playwright() as playwright:
        browser = playwright.chromium.launch(headless=False)
        
        try:
            page = browser.new_page()
            page.goto("http://127.0.0.1:5000", wait_until="load")
            
            # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–∞–ø—á—É
            page.wait_for_selector('iframe[title*="—Ñ–ª–∞–∂–∫–æ–º"]', timeout=10000)
            checkbox_frame = page.frame_locator('iframe[title*="—Ñ–ª–∞–∂–∫–æ–º"]')
            checkbox_frame.locator('#checkbox').click()
            time.sleep(5)
            
            # –ù–∞—Ö–æ–¥–∏–º iframe —Å canvas
            challenge_frame = None
            for frame in page.frames:
                try:
                    if 'hcaptcha.com' in frame.url and 'challenge' in frame.url:
                        challenge_frame = frame
                        break
                except:
                    continue
            
            if not challenge_frame:
                print("‚ùå iframe –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            
            print("üîç –¢–û–ß–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê CANVAS")
            print("="*40)
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            canvas_analysis = challenge_frame.evaluate("""
                (() => {
                    const canvas = document.querySelector('canvas');
                    if (!canvas) return {error: "Canvas –Ω–µ –Ω–∞–π–¥–µ–Ω"};
                    
                    const rect = canvas.getBoundingClientRect();
                    const containerRect = document.querySelector('.challenge-container')?.getBoundingClientRect();
                    
                    return {
                        canvas: {
                            logical: {width: canvas.width, height: canvas.height},
                            css: {width: rect.width, height: rect.height},
                            position: {x: rect.x, y: rect.y, left: rect.left, top: rect.top}
                        },
                        container: containerRect ? {
                            width: containerRect.width,
                            height: containerRect.height,
                            x: containerRect.x,
                            y: containerRect.y
                        } : null,
                        viewport: {
                            width: window.innerWidth,
                            height: window.innerHeight
                        }
                    };
                })()
            """)
            
            print("üìä Canvas –∞–Ω–∞–ª–∏–∑:")
            canvas_info = canvas_analysis['canvas']
            print(f"   –õ–æ–≥–∏—á–µ—Å–∫–∏–µ: {canvas_info['logical']['width']}x{canvas_info['logical']['height']}")
            print(f"   CSS: {canvas_info['css']['width']}x{canvas_info['css']['height']}")
            print(f"   –ü–æ–∑–∏—Ü–∏—è: ({canvas_info['position']['x']}, {canvas_info['position']['y']})")
            
            if canvas_analysis['container']:
                cont_info = canvas_analysis['container']
                print(f"üì¶ Container: {cont_info['width']}x{cont_info['height']} –≤ ({cont_info['x']}, {cont_info['y']})")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∫–∞–∂–¥—É—é —è—á–µ–π–∫—É
            print(f"\nüéØ –°–ò–°–¢–ï–ú–ê–¢–ò–ß–ï–°–ö–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–ï–¢–ö–ò 3x3")
            print("="*50)
            
            # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Å —É—á–µ—Ç–æ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—ã hCaptcha
            # –£—á–∏—Ç—ã–≤–∞–µ–º —á—Ç–æ —Å–≤–µ—Ä—Ö—É –µ—Å—Ç—å –ø—Ä–∏–º–µ—Ä—ã + –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è
            
            # –û—Å–Ω–æ–≤—ã–≤–∞—è—Å—å –Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ hCaptcha:
            # - –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è: ~60px —Å–≤–µ—Ä—Ö—É  
            # - –û—Å–Ω–æ–≤–Ω–∞—è –æ–±–ª–∞—Å—Ç—å: –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å ~100px
            # - –°–µ—Ç–∫–∞ 3x3 –≤ –æ–±–ª–∞—Å—Ç–∏ ~400x300px
            
            grid_coords = [
                # –†—è–¥ 1 (–≤–µ—Ä—Ö–Ω–∏–π)
                (83, 180),   # [0] –ª–µ–≤–æ-–≤–µ—Ä—Ö
                (250, 180),  # [1] —Ü–µ–Ω—Ç—Ä-–≤–µ—Ä—Ö  
                (417, 180),  # [2] –ø—Ä–∞–≤–æ-–≤–µ—Ä—Ö
                
                # –†—è–¥ 2 (—Å—Ä–µ–¥–Ω–∏–π)
                (83, 290),   # [3] –ª–µ–≤–æ-—Ü–µ–Ω—Ç—Ä
                (250, 290),  # [4] —Ü–µ–Ω—Ç—Ä-—Ü–µ–Ω—Ç—Ä
                (417, 290),  # [5] –ø—Ä–∞–≤–æ-—Ü–µ–Ω—Ç—Ä ‚Üê –ü–†–û–ë–õ–ï–ú–ù–ê–Ø –Ø–ß–ï–ô–ö–ê
                
                # –†—è–¥ 3 (–Ω–∏–∂–Ω–∏–π)
                (83, 400),   # [6] –ª–µ–≤–æ-–Ω–∏–∑
                (250, 400),  # [7] —Ü–µ–Ω—Ç—Ä-–Ω–∏–∑
                (417, 400),  # [8] –ø—Ä–∞–≤–æ-–Ω–∏–∑
            ]
            
            descriptions = [
                "–ª–µ–≤–æ-–≤–µ—Ä—Ö", "—Ü–µ–Ω—Ç—Ä-–≤–µ—Ä—Ö", "–ø—Ä–∞–≤–æ-–≤–µ—Ä—Ö",
                "–ª–µ–≤–æ-—Ü–µ–Ω—Ç—Ä", "—Ü–µ–Ω—Ç—Ä-—Ü–µ–Ω—Ç—Ä", "–ø—Ä–∞–≤–æ-—Ü–µ–Ω—Ç—Ä", 
                "–ª–µ–≤–æ-–Ω–∏–∑", "—Ü–µ–Ω—Ç—Ä-–Ω–∏–∑", "–ø—Ä–∞–≤–æ-–Ω–∏–∑"
            ]
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ü–≤–µ—Ç–Ω—ã–µ –æ—Ç–º–µ—Ç–∫–∏
            for i, ((x, y), desc) in enumerate(zip(grid_coords, descriptions)):
                try:
                    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ canvas –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
                    canvas_x = x * 2  # –ú–∞—Å—à—Ç–∞–± 2:1
                    canvas_y = y * 2
                    
                    # –¶–≤–µ—Ç–æ–≤–∞—è —Å—Ö–µ–º–∞ –¥–ª—è –ª—É—á—à–µ–π –≤–∏–¥–∏–º–æ—Å—Ç–∏
                    colors = ['red', 'orange', 'yellow', 'green', 'blue', 'purple', 'pink', 'cyan', 'magenta']
                    color = colors[i % len(colors)]
                    
                    challenge_frame.evaluate(f"""
                        const canvas = document.querySelector('canvas');
                        if (canvas) {{
                            const ctx = canvas.getContext('2d');
                            
                            // –¶–≤–µ—Ç–Ω–æ–π –∫—Ä—É–≥
                            ctx.fillStyle = '{color}';
                            ctx.beginPath();
                            ctx.arc({canvas_x}, {canvas_y}, 25, 0, 2 * Math.PI);
                            ctx.fill();
                            
                            // –ß–µ—Ä–Ω–∞—è –æ–±–≤–æ–¥–∫–∞
                            ctx.strokeStyle = 'black';
                            ctx.lineWidth = 3;
                            ctx.stroke();
                            
                            // –ë–µ–ª—ã–π –Ω–æ–º–µ—Ä
                            ctx.fillStyle = 'white';
                            ctx.font = 'bold 20px Arial';
                            ctx.textAlign = 'center';
                            ctx.fillText('{i}', {canvas_x}, {canvas_y} + 7);
                        }}
                    """)
                    
                    print(f"   [{i}] {desc}: CSS({x},{y}) ‚Üí Canvas({canvas_x},{canvas_y}) ‚Üí {color}")
                    
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ—Ç–∫–∏ {i}: {e}")
            
            print(f"\nüìã –ê–ù–ê–õ–ò–ó –ü–û–ó–ò–¶–ò–ô:")
            print(f"‚úÖ –ï—Å–ª–∏ —Ü–≤–µ—Ç–Ω—ã–µ –∫—Ä—É–≥–∏ –≤ —Ü–µ–Ω—Ç—Ä–∞—Ö —è—á–µ–µ–∫ - –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ")
            print(f"‚ùå –ï—Å–ª–∏ —Å–º–µ—â–µ–Ω—ã - –∑–∞–ø–∏—à–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏")
            
            input("\n–ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –±—Ä–∞—É–∑–µ—Ä –∏ –Ω–∞–∂–º–∏—Ç–µ Enter...")
            
            # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞
            print(f"\nüîß –ö–û–†–†–ï–ö–¢–ò–†–û–í–ö–ê –ö–û–û–†–î–ò–ù–ê–¢:")
            print(f"–ö–∞–∫–∞—è —è—á–µ–π–∫–∞ —Å–º–µ—â–µ–Ω–∞ –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ? (0-8, –∏–ª–∏ 'ok' –µ—Å–ª–∏ –≤—Å–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ): ", end="")
            
            user_input = input().strip().lower()
            
            if user_input == 'ok':
                print("‚úÖ –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ!")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
                final_coords = {
                    "grid_3x3": grid_coords,
                    "canvas_scale": 2.0,
                    "status": "calibrated"
                }
                
                coord_file = Path("analysis/coordinates.json")
                import json
                with open(coord_file, 'w') as f:
                    json.dump(final_coords, f, indent=2)
                
                print(f"üíæ –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {coord_file}")
                
            elif user_input.isdigit():
                cell_num = int(user_input)
                if 0 <= cell_num <= 8:
                    print(f"üéØ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–π –∫–ª–∏–∫ –ø–æ —è—á–µ–π–∫–µ {cell_num}...")
                    
                    x, y = grid_coords[cell_num]
                    
                    # –ü–æ–ª—É—á–∞–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è –∫–ª–∏–∫–∞
                    canvas_bbox = challenge_frame.locator('canvas').bounding_box()
                    abs_x = canvas_bbox['x'] + x
                    abs_y = canvas_bbox['y'] + y
                    
                    print(f"üìç –ö–ª–∏–∫–∞–µ–º: CSS({x},{y}) ‚Üí –ê–±—Å–æ–ª—é—Ç–Ω—ã–µ({abs_x},{abs_y})")
                    
                    # –†–µ–∞–ª—å–Ω—ã–π –∫–ª–∏–∫
                    page.mouse.click(abs_x, abs_y)
                    
                    # –ó–µ–ª–µ–Ω–∞—è –æ—Ç–º–µ—Ç–∫–∞ —É—Å–ø–µ—Ö–∞
                    canvas_x, canvas_y = x * 2, y * 2
                    challenge_frame.evaluate(f"""
                        const canvas = document.querySelector('canvas');
                        if (canvas) {{
                            const ctx = canvas.getContext('2d');
                            ctx.fillStyle = 'lime';
                            ctx.beginPath();
                            ctx.arc({canvas_x}, {canvas_y}, 30, 0, 2 * Math.PI);
                            ctx.fill();
                            ctx.fillStyle = 'black';
                            ctx.font = 'bold 24px Arial';
                            ctx.textAlign = 'center';
                            ctx.fillText('‚úì', {canvas_x}, {canvas_y} + 8);
                        }}
                    """)
                    
                    print(f"‚úÖ –ö–ª–∏–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω! –Ø—á–µ–π–∫–∞ –¥–æ–ª–∂–Ω–∞ –ø–æ–¥—Å–≤–µ—Ç–∏—Ç—å—Å—è –∑–µ–ª–µ–Ω—ã–º")
                    time.sleep(2)
                    
            input("\n–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –ù–∞–∂–º–∏—Ç–µ Enter...")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏: {e}")
        finally:
            browser.close()


if __name__ == "__main__":
    print("üî¨ –¢–æ—á–Ω–∞—è –∫–∞–ª–∏–±—Ä–æ–≤–∫–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç hCaptcha")
    print("="*45)
    
    precise_coordinate_mapping()
