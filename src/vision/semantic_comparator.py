#!/usr/bin/env python3
"""
–°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –∫–æ–º–ø–∞—Ä–∞—Ç–æ—Ä –¥–ª—è –ø–æ–∏—Å–∫–∞ –æ—Ç–ª–∏—á–∏–π –º–µ–∂–¥—É –æ–±–ª–∞—Å—Ç—è–º–∏ –∫–∞–ø—á–∏.
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç CLIP –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –∏ –ø–æ–∏—Å–∫–∞ "–≤—ã–±–∏–≤–∞—é—â–∏—Ö—Å—è" —ç–ª–µ–º–µ–Ω—Ç–æ–≤.
"""

import torch
import numpy as np
from PIL import Image
from pathlib import Path
from .smart_detector import SmartDetector


class SemanticComparator:
    """–°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –æ–±–ª–∞—Å—Ç–µ–π"""
    
    def __init__(self):
        self.detector = SmartDetector()
        self.similarity_threshold = 0.7
        
    def analyze_regions(self, region_images, instruction):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤—Å–µ —Ä–µ–≥–∏–æ–Ω—ã –∏ –Ω–∞—Ö–æ–¥–∏—Ç —Ä–µ—à–µ–Ω–∏–µ"""
        if not region_images:
            return []
        
        print(f"üß† –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ {len(region_images)} —Ä–µ–≥–∏–æ–Ω–æ–≤")
        print(f"üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è: '{instruction}'")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º CLIP –º–æ–¥–µ–ª—å
        if not self.detector.load_clip_model():
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å CLIP –º–æ–¥–µ–ª—å")
            return []
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –∞–Ω–∞–ª–∏–∑–∞ –ø–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
        strategy = self._determine_strategy(instruction)
        print(f"üéØ –°—Ç—Ä–∞—Ç–µ–≥–∏—è: {strategy}")
        
        if strategy == "find_different":
            return self._find_different_regions(region_images, instruction)
        elif strategy == "find_similar":
            return self._find_similar_regions(region_images, instruction)
        elif strategy == "find_specific":
            return self._find_specific_objects(region_images, instruction)
        else:
            print("‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–∏—Å–∫ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤")
            return self._find_specific_objects(region_images, instruction)
    
    def _determine_strategy(self, instruction):
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –∞–Ω–∞–ª–∏–∑–∞ –ø–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏"""
        instruction_lower = instruction.lower()
        
        # –ü–æ–∏—Å–∫ –æ—Ç–ª–∏—á–∞—é—â–∏—Ö—Å—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        if any(word in instruction_lower for word in [
            "–Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç", "–æ—Ç–ª–∏—á–∞–µ—Ç—Å—è", "–≤—ã–±–∏–≤–∞–µ—Ç—Å—è", "–¥—Ä—É–≥–æ–π", "–æ—Ç–ª–∏—á–∞—é—â",
            "different", "not belong", "odd one", "doesn't belong"
        ]):
            return "find_different"
        
        # –ü–æ–∏—Å–∫ –ø–æ—Ö–æ–∂–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        elif any(word in instruction_lower for word in [
            "–ø–æ—Ö–æ–∂–∏–π", "—Å—Ö–æ–∂–∏–π", "–æ–¥–∏–Ω–∞–∫–æ–≤", "—Ç–∞–∫–æ–π –∂–µ", "—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤",
            "similar", "same", "matching", "like"
        ]):
            return "find_similar"
        
        # –ü–æ–∏—Å–∫ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
        elif any(word in instruction_lower for word in [
            "–≤—ã–±–µ—Ä–∏—Ç–µ", "–Ω–∞–π–¥–∏—Ç–µ", "–ø–æ–∫–∞–∂–∏—Ç–µ", "—É–∫–∞–∂–∏—Ç–µ",
            "select", "choose", "find", "pick"
        ]):
            return "find_specific"
        
        return "find_specific"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
    
    def _find_different_regions(self, region_images, instruction):
        """–ù–∞—Ö–æ–¥–∏—Ç —Ä–µ–≥–∏–æ–Ω, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç –¥—Ä—É–≥–∏—Ö"""
        print("üîç –ò—â–µ–º –æ—Ç–ª–∏—á–∞—é—â–∏–π—Å—è —ç–ª–µ–º–µ–Ω—Ç...")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–∞–∂–¥–æ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞
        region_analysis = []
        
        for region_data in region_images:
            region_image = region_data["image"]
            region_index = region_data["index"]
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
            score, detected_object = self.detector.analyze_cell_with_clip(region_image, instruction)
            
            region_analysis.append({
                "index": region_index,
                "object": detected_object,
                "score": score,
                "center": region_data["center"],
                "bbox": region_data["bbox"]
            })
            
            print(f"   –†–µ–≥–∏–æ–Ω {region_index}: {detected_object} (score: {score:.3f})")
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ç–∏–ø–∞–º –æ–±—ä–µ–∫—Ç–æ–≤
        object_groups = {}
        for analysis in region_analysis:
            obj_type = analysis["object"]
            if obj_type not in object_groups:
                object_groups[obj_type] = []
            object_groups[obj_type].append(analysis)
        
        print(f"\nüìä –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –æ–±—ä–µ–∫—Ç–æ–≤:")
        for obj_type, regions in object_groups.items():
            print(f"   {obj_type}: {len(regions)} —Ä–µ–≥–∏–æ–Ω–æ–≤")
        
        # –ù–∞—Ö–æ–¥–∏–º "–≤—ã–±–∏–≤–∞—é—â–∏–π—Å—è" –æ–±—ä–µ–∫—Ç (–∫–æ—Ç–æ—Ä—ã–π –≤ –º–µ–Ω—å—à–∏–Ω—Å—Ç–≤–µ)
        minority_objects = []
        
        for obj_type, regions in object_groups.items():
            if len(regions) == 1:  # –ï–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –≤ —Å–≤–æ–µ–º —Ä–æ–¥–µ
                minority_objects.extend(regions)
                print(f"‚úÖ –ù–∞–π–¥–µ–Ω —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç: {obj_type}")
        
        # –ï—Å–ª–∏ –Ω–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö, –∏—â–µ–º –Ω–∞–∏–º–µ–Ω—å—à—É—é –≥—Ä—É–ø–ø—É
        if not minority_objects:
            min_group_size = min(len(regions) for regions in object_groups.values())
            for obj_type, regions in object_groups.items():
                if len(regions) == min_group_size:
                    minority_objects.extend(regions)
                    print(f"üéØ –ù–∞–π–¥–µ–Ω–∞ –Ω–∞–∏–º–µ–Ω—å—à–∞—è –≥—Ä—É–ø–ø–∞: {obj_type} ({len(regions)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤)")
                    break
        
        return minority_objects
    
    def _find_similar_regions(self, region_images, instruction):
        """–ù–∞—Ö–æ–¥–∏—Ç —Ä–µ–≥–∏–æ–Ω—ã, –ø–æ—Ö–æ–∂–∏–µ –Ω–∞ –∑–∞–¥–∞–Ω–Ω—ã–π –æ–±—Ä–∞–∑–µ—Ü"""
        print("üîç –ò—â–µ–º –ø–æ—Ö–æ–∂–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã...")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ —Ä–µ–≥–∏–æ–Ω—ã
        region_analysis = []
        
        for region_data in region_images:
            region_image = region_data["image"]
            region_index = region_data["index"]
            
            score, detected_object = self.detector.analyze_cell_with_clip(region_image, instruction)
            
            region_analysis.append({
                "index": region_index,
                "object": detected_object,
                "score": score,
                "center": region_data["center"],
                "bbox": region_data["bbox"]
            })
            
            print(f"   –†–µ–≥–∏–æ–Ω {region_index}: {detected_object} (score: {score:.3f})")
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ—Ö–æ–∂–∏–µ –æ–±—ä–µ–∫—Ç—ã
        similar_groups = {}
        for analysis in region_analysis:
            obj_type = analysis["object"]
            if obj_type not in similar_groups:
                similar_groups[obj_type] = []
            similar_groups[obj_type].append(analysis)
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–∞–º—É—é –±–æ–ª—å—à—É—é –≥—Ä—É–ø–ø—É (–Ω–∞–∏–±–æ–ª–µ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã)
        if similar_groups:
            largest_group = max(similar_groups.values(), key=len)
            print(f"üéØ –ù–∞–π–¥–µ–Ω–∞ —Å–∞–º–∞—è –±–æ–ª—å—à–∞—è –≥—Ä—É–ø–ø–∞: {largest_group[0]['object']} ({len(largest_group)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤)")
            return largest_group
        
        return []
    
    def _find_specific_objects(self, region_images, instruction):
        """–ù–∞—Ö–æ–¥–∏—Ç —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã –ø–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏"""
        print("üîç –ò—â–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã...")
        
        matching_regions = []
        
        for region_data in region_images:
            region_image = region_data["image"]
            region_index = region_data["index"]
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
            score, detected_object = self.detector.analyze_cell_with_clip(region_image, instruction)
            
            print(f"   –†–µ–≥–∏–æ–Ω {region_index}: {detected_object} (score: {score:.3f})")
            
            # –ï—Å–ª–∏ score –≤—ã—à–µ –ø–æ—Ä–æ–≥–∞ - —Ä–µ–≥–∏–æ–Ω –ø–æ–¥—Ö–æ–¥–∏—Ç
            if score > 0.25:
                matching_regions.append({
                    "index": region_index,
                    "object": detected_object,
                    "score": score,
                    "center": region_data["center"],
                    "bbox": region_data["bbox"]
                })
                print(f"‚úÖ –†–µ–≥–∏–æ–Ω {region_index} –ø–æ–¥—Ö–æ–¥–∏—Ç: {detected_object}")
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ score
        matching_regions.sort(key=lambda x: x["score"], reverse=True)
        
        return matching_regions


def test_semantic_analysis(image_path="analysis/captcha.png", instruction="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –∫ –≥—Ä—É–ø–ø–µ"):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑"""
    from region_detector import RegionDetector
    
    if not Path(image_path).exists():
        print(f"‚ùå –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ: {image_path}")
        return
    
    print("üß† –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞")
    print("="*50)
    
    # 1. –î–µ—Ç–µ–∫—Ü–∏—è —Ä–µ–≥–∏–æ–Ω–æ–≤
    detector = RegionDetector()
    regions = detector.detect_regions(image_path)
    
    if not regions:
        print("‚ùå –†–µ–≥–∏–æ–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return
    
    # 2. –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Ä–µ–≥–∏–æ–Ω–æ–≤
    region_images = detector.extract_region_images(image_path, regions)
    
    # 3. –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑
    comparator = SemanticComparator()
    results = comparator.analyze_regions(region_images, instruction)
    
    # 4. –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print(f"\nüéØ –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ê–ù–ê–õ–ò–ó–ê:")
    print("="*30)
    
    if results:
        for result in results:
            center = result["center"]
            obj = result["object"]
            score = result.get("score", 0)
            print(f"–†–µ–≥–∏–æ–Ω {result['index']}: {obj} (score: {score:.3f})")
            print(f"  ‚Üí –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∫–ª–∏–∫–∞: {center}")
        
        print(f"\nüéâ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø: –ö–ª–∏–∫–Ω—É—Ç—å –Ω–∞ {len(results)} —Ä–µ–≥–∏–æ–Ω–æ–≤")
        
    else:
        print("‚ùå –ü–æ–¥—Ö–æ–¥—è—â–∏—Ö —Ä–µ–≥–∏–æ–Ω–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        print("üéØ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø: –ù–∞–∂–∞—Ç—å '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'")


if __name__ == "__main__":
    test_semantic_analysis()
