#!/usr/bin/env python3
"""
–ú–æ–¥—É–ª—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –∫–ª–∏–∫–æ–≤ –ø–æ –∫–∞–ø—á–µ.
–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–∞–∂–¥—É—é —è—á–µ–π–∫—É –∏ –∫–ª–∏–∫–∞–µ—Ç –ø–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º.
"""

import json
from pathlib import Path
from PIL import Image
import numpy as np


class CaptchaClicker:
    """–ö–ª–∞—Å—Å –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è –∫–∞–ø—á –∫–ª–∏–∫–∞–º–∏"""
    
    def __init__(self):
        self.grid_size = 3  # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è —Å–µ—Ç–∫–∞ 3x3
        self.cell_predictions = []
        
    def find_task_grid_area(self, image):
        """–ù–∞—Ö–æ–¥–∏—Ç –æ–±–ª–∞—Å—Ç—å —Å –æ—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ç–∫–æ–π –∑–∞–¥–∞–Ω–∏—è, –∏—Å–∫–ª—é—á–∞—è –ø—Ä–∏–º–µ—Ä—ã"""
        width, height = image.size
        img_array = np.array(image)
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –æ—Ç—Ç–µ–Ω–∫–∏ —Å–µ—Ä–æ–≥–æ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        if len(img_array.shape) == 3:
            gray = np.mean(img_array, axis=2)
        else:
            gray = img_array
            
        # –ò—â–µ–º –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–µ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏ (–ª–∏–Ω–∏–∏ –º–µ–∂–¥—É —Ä—è–¥–∞–º–∏)
        horizontal_edges = []
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é —Å—Ç—Ä–æ–∫—É –Ω–∞ –Ω–∞–ª–∏—á–∏–µ "—Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å–Ω—ã—Ö" –ø–∏–∫—Å–µ–ª–µ–π
        for y in range(height):
            row = gray[y, :]
            # –ò—â–µ–º –æ–±–ª–∞—Å—Ç–∏ —Å –Ω–∏–∑–∫–æ–π –≤–∞—Ä–∏–∞—Ü–∏–µ–π (—Ñ–æ–Ω, —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏)
            if np.std(row) < 20:  # –ù–∏–∑–∫–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ = –æ–¥–Ω–æ—Ä–æ–¥–Ω–∞—è –æ–±–ª–∞—Å—Ç—å
                horizontal_edges.append(y)
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Å–æ—Å–µ–¥–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏
        edge_groups = []
        current_group = []
        
        for edge in horizontal_edges:
            if not current_group or edge - current_group[-1] <= 5:
                current_group.append(edge)
            else:
                if len(current_group) > 3:  # –ó–Ω–∞—á–∏–º–∞—è –≥—Ä—É–ø–ø–∞
                    edge_groups.append((min(current_group), max(current_group)))
                current_group = [edge]
        
        if current_group and len(current_group) > 3:
            edge_groups.append((min(current_group), max(current_group)))
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±–ª–∞—Å—Ç–∏ –º–µ–∂–¥—É —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º–∏
        if len(edge_groups) >= 2:
            # –í–µ—Ä–æ—è—Ç–Ω–æ –µ—Å—Ç—å –ø—Ä–∏–º–µ—Ä—ã —Å–≤–µ—Ä—Ö—É –∏ —Å–µ—Ç–∫–∞ —Å–Ω–∏–∑—É
            examples_end = edge_groups[0][1]  # –ö–æ–Ω–µ—Ü –æ–±–ª–∞—Å—Ç–∏ –ø—Ä–∏–º–µ—Ä–æ–≤
            task_start = edge_groups[1][0]    # –ù–∞—á–∞–ª–æ –æ—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ç–∫–∏
            
            # –û—Å–Ω–æ–≤–Ω–∞—è —Å–µ—Ç–∫–∞ - —ç—Ç–æ –Ω–∏–∂–Ω—è—è —á–∞—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            task_top = max(examples_end + 10, height // 3)  # –ù–µ –≤—ã—à–µ 1/3 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            task_bottom = height - 10  # –ù–µ–º–Ω–æ–≥–æ –æ—Ç—Å—Ç—É–ø–∞ —Å–Ω–∏–∑—É
            
            print(f"üîç –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏")
            print(f"   –ü—Ä–∏–º–µ—Ä—ã: 0-{examples_end}px")
            print(f"   –û—Å–Ω–æ–≤–Ω–∞—è —Å–µ—Ç–∫–∞: {task_top}-{task_bottom}px")
            
            return 0, task_top, width, task_bottom
        
        else:
            # –ü—Ä–æ—Å—Ç–∞—è —Å–µ—Ç–∫–∞ –±–µ–∑ –ø—Ä–∏–º–µ—Ä–æ–≤ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å—é –æ–±–ª–∞—Å—Ç—å
            print("üîç –ü—Ä–æ—Å—Ç–∞—è —Å–µ—Ç–∫–∞ –±–µ–∑ –ø—Ä–∏–º–µ—Ä–æ–≤ —Å–≤–µ—Ä—Ö—É")
            return 0, height // 4, width, height  # –û—Ç—Å—Ç—É–ø —Å–≤–µ—Ä—Ö—É –¥–ª—è —Ç–µ–∫—Å—Ç–∞

    def split_captcha_image(self, image_path):
        """–†–∞–∑–¥–µ–ª—è–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞–ø—á–∏ –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ —è—á–µ–π–∫–∏ —Å —É–º–Ω—ã–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º —Å–µ—Ç–∫–∏"""
        try:
            image = Image.open(image_path)
            width, height = image.size
            
            print(f"üìê –†–∞–∑–º–µ—Ä –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {width}x{height}")
            
            # –ù–∞—Ö–æ–¥–∏–º –æ–±–ª–∞—Å—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ç–∫–∏
            grid_left, grid_top, grid_right, grid_bottom = self.find_task_grid_area(image)
            
            # –í—ã—Ä–µ–∑–∞–µ–º –æ–±–ª–∞—Å—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ç–∫–∏
            task_area = image.crop((grid_left, grid_top, grid_right, grid_bottom))
            task_width = grid_right - grid_left
            task_height = grid_bottom - grid_top
            
            print(f"üìä –û–±–ª–∞—Å—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ç–∫–∏: {task_width}x{task_height}")
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–∑–º–µ—Ä—ã —è—á–µ–π–∫–∏ –≤ —Ä–∞–±–æ—á–µ–π –æ–±–ª–∞—Å—Ç–∏
            cell_width = task_width // self.grid_size
            cell_height = task_height // self.grid_size
            
            print(f"üî¢ –†–∞–∑–º–µ—Ä —è—á–µ–π–∫–∏: {cell_width}x{cell_height}")
            
            cells = []
            cell_positions = []
            
            for row in range(self.grid_size):
                for col in range(self.grid_size):
                    # –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —è—á–µ–π–∫–∏ –≤ —Ä–∞–±–æ—á–µ–π –æ–±–ª–∞—Å—Ç–∏
                    left = col * cell_width
                    top = row * cell_height
                    right = left + cell_width  
                    bottom = top + cell_height
                    
                    # –í—ã—Ä–µ–∑–∞–µ–º —è—á–µ–π–∫—É –∏–∑ —Ä–∞–±–æ—á–µ–π –æ–±–ª–∞—Å—Ç–∏
                    cell = task_area.crop((left, top, right, bottom))
                    cells.append(cell)
                    
                    # –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è –∫–ª–∏–∫–æ–≤ –≤ –∏—Å—Ö–æ–¥–Ω–æ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏
                    center_x = grid_left + left + cell_width // 2
                    center_y = grid_top + top + cell_height // 2
                    cell_positions.append((center_x, center_y))
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–ª–∞—Å—Ç–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            cells_dir = Path("analysis/cells")
            cells_dir.mkdir(exist_ok=True)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ö–æ–¥–Ω—É—é —Ä–∞–±–æ—á—É—é –æ–±–ª–∞—Å—Ç—å
            task_area.save(cells_dir / "task_area.png")
            
            for i, cell in enumerate(cells):
                cell.save(cells_dir / f"cell_{i}.png")
            
            print(f"üìä –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–µ–Ω–æ –Ω–∞ {len(cells)} —è—á–µ–µ–∫")
            print(f"üîç –Ø—á–µ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {cells_dir}")
            
            return cells, cell_positions
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
            import traceback
            traceback.print_exc()
            return [], []
    
    def analyze_cell_content_smart(self, cell_image, cell_index, instruction):
        """–£–º–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —è—á–µ–π–∫–∏ —Å –ø–æ–º–æ—â—å—é CLIP"""
        try:
            # –ü—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å CLIP –¥–ª—è —É–º–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
            try:
                from smart_detector import SmartDetector
                
                if not hasattr(self, '_smart_detector'):
                    self._smart_detector = SmartDetector()
                    self._smart_detector.load_clip_model()
                
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —è—á–µ–π–∫—É —Å –ø–æ–º–æ—â—å—é CLIP
                score, best_object = self._smart_detector.analyze_cell_with_clip(cell_image, instruction)
                
                return {
                    "index": cell_index,
                    "clip_score": score,
                    "detected_object": best_object,
                    "method": "CLIP_analysis"
                }
                
            except ImportError:
                print(f"‚ö†Ô∏è CLIP –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —è—á–µ–π–∫–∏ {cell_index}, –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑")
                # Fallback –∫ –±–∞–∑–æ–≤–æ–º—É –∞–Ω–∞–ª–∏–∑—É
                return self.analyze_cell_content_basic(cell_image, cell_index)
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —É–º–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —è—á–µ–π–∫–∏ {cell_index}: {e}")
            return {"index": cell_index, "error": str(e)}
    
    def analyze_cell_content_basic(self, cell_image, cell_index):
        """–ë–∞–∑–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —è—á–µ–π–∫–∏ (fallback)"""
        try:
            # –ê–Ω–∞–ª–∏–∑ —Ü–≤–µ—Ç–æ–≤ (–±–∞–∑–æ–≤—ã–π)
            img_array = np.array(cell_image)
            
            # –°—Ä–µ–¥–Ω–∏–µ —Ü–≤–µ—Ç–∞ RGB
            avg_colors = np.mean(img_array, axis=(0, 1))
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–æ–º–∏–Ω–∏—Ä—É—é—â–∏–µ —Ü–≤–µ—Ç–∞
            is_mostly_brown = avg_colors[0] > 100 and avg_colors[1] > 80 and avg_colors[2] < 100  # –ö–æ—Ä–∏—á–Ω–µ–≤—ã–π (–¥–µ—Ä–µ–≤–æ)
            is_mostly_gray = np.std(avg_colors) < 30  # –°–µ—Ä—ã–π (–º–µ—Ç–∞–ª–ª/–±–µ—Ç–æ–Ω)
            is_mostly_green = avg_colors[1] > max(avg_colors[0], avg_colors[2])  # –ó–µ–ª–µ–Ω—ã–π (—Ä–∞—Å—Ç–µ–Ω–∏—è)
            is_mostly_blue = avg_colors[2] > max(avg_colors[0], avg_colors[1])  # –°–∏–Ω–∏–π (–≤–æ–¥–∞)
            
            # –°–æ–±–∏—Ä–∞–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏ —è—á–µ–π–∫–∏
            cell_features = {
                "index": cell_index,
                "colors": {
                    "avg_rgb": avg_colors.tolist(),
                    "is_brown": is_mostly_brown,
                    "is_gray": is_mostly_gray, 
                    "is_green": is_mostly_green,
                    "is_blue": is_mostly_blue
                },
                "method": "basic_colors"
            }
            
            return cell_features
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –±–∞–∑–æ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —è—á–µ–π–∫–∏ {cell_index}: {e}")
            return {"index": cell_index, "error": str(e)}
    
    def match_instruction_to_cells_smart(self, instruction, cell_features_list, threshold=0.25):
        """–£–º–Ω–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ —Å —Å–æ–¥–µ—Ä–∂–∏–º—ã–º —è—á–µ–µ–∫ –Ω–∞ –æ—Å–Ω–æ–≤–µ CLIP –∞–Ω–∞–ª–∏–∑–∞"""
        matching_cells = []
        
        print(f"üß† –£–º–Ω–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è: '{instruction}'")
        print(f"‚ö° –ü–æ—Ä–æ–≥ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ CLIP: {threshold}")
        
        for cell_features in cell_features_list:
            cell_index = cell_features["index"]
            
            # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–ª—è CLIP –∞–Ω–∞–ª–∏–∑–∞
            if cell_features.get("method") == "CLIP_analysis":
                clip_score = cell_features.get("clip_score", 0.0)
                detected_object = cell_features.get("detected_object", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
                
                if clip_score > threshold:
                    matching_cells.append({
                        "index": cell_index,
                        "score": clip_score,
                        "reasons": [f"CLIP: {detected_object} ({clip_score:.3f})"]
                    })
                    print(f"‚úÖ –Ø—á–µ–π–∫–∞ {cell_index}: {detected_object} (CLIP score: {clip_score:.3f})")
                else:
                    print(f"   –Ø—á–µ–π–∫–∞ {cell_index}: {detected_object} (—Å–ª–∏—à–∫–æ–º –Ω–∏–∑–∫–∏–π score: {clip_score:.3f})")
            
            # Fallback –∫ –±–∞–∑–æ–≤–æ–º—É –∞–Ω–∞–ª–∏–∑—É
            elif cell_features.get("method") == "basic_colors":
                matches = False
                reasons = []
                instruction_lower = instruction.lower()
                
                # –ë–∞–∑–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ –ø–æ —Ü–≤–µ—Ç–∞–º
                colors = cell_features.get("colors", {})
                
                if any(word in instruction_lower for word in ["—Å–∏–¥–µ—Ç—å", "—Å—Ç—É–ª", "chair", "–∫—Ä–µ—Å–ª–æ", "–¥–∏–≤–∞–Ω"]):
                    if colors.get("is_brown", False):
                        matches = True
                        reasons.append("–∫–æ—Ä–∏—á–Ω–µ–≤—ã–π —Ü–≤–µ—Ç (–º–µ–±–µ–ª—å)")
                        
                elif any(word in instruction_lower for word in ["–∞–≤—Ç–æ–º–æ–±–∏–ª", "–º–∞—à–∏–Ω", "car", "—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç"]):
                    if colors.get("is_gray", False):
                        matches = True
                        reasons.append("—Å–µ—Ä—ã–π —Ü–≤–µ—Ç (–º–µ—Ç–∞–ª–ª)")
                        
                elif any(word in instruction_lower for word in ["–ª–µ—Å", "–¥–µ—Ä–µ–≤", "forest", "tree"]):
                    if colors.get("is_green", False) or colors.get("is_brown", False):
                        matches = True
                        reasons.append("–∑–µ–ª–µ–Ω—ã–π/–∫–æ—Ä–∏—á–Ω–µ–≤—ã–π (–ø—Ä–∏—Ä–æ–¥–∞)")
                        
                elif any(word in instruction_lower for word in ["–æ–∫–µ–∞–Ω", "–º–æ—Ä–µ", "–≤–æ–¥–∞", "water"]):
                    if colors.get("is_blue", False):
                        matches = True
                        reasons.append("—Å–∏–Ω–∏–π —Ü–≤–µ—Ç (–≤–æ–¥–∞)")
                
                if matches:
                    matching_cells.append({
                        "index": cell_index,
                        "score": 0.6,  # –ë–∞–∑–æ–≤—ã–π score –¥–ª—è —Ü–≤–µ—Ç–æ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
                        "reasons": reasons
                    })
                    print(f"‚úÖ –Ø—á–µ–π–∫–∞ {cell_index} (–±–∞–∑–æ–≤—ã–π): {', '.join(reasons)}")
        
        return matching_cells
    
    def plan_clicks(self, image_path, instruction):
        """–ü–ª–∞–Ω–∏—Ä—É–µ—Ç –∫–∞–∫–∏–µ —è—á–µ–π–∫–∏ –Ω—É–∂–Ω–æ –∫–ª–∏–∫–Ω—É—Ç—å —Å —É–º–Ω—ã–º –∞–Ω–∞–ª–∏–∑–æ–º"""
        print(f"\nüß† –ü–ª–∞–Ω–∏—Ä—É–µ–º —É–º–Ω—ã–µ –∫–ª–∏–∫–∏ –¥–ª—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏: '{instruction}'")
        
        # –†–∞–∑–¥–µ–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞ —è—á–µ–π–∫–∏
        cells, positions = self.split_captcha_image(image_path)
        
        if not cells:
            return [], []
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é —è—á–µ–π–∫—É —Å —É–º–Ω—ã–º –¥–µ—Ç–µ–∫—Ç–æ—Ä–æ–º
        print("üîç –£–º–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —è—á–µ–µ–∫...")
        cell_features_list = []
        
        for i, cell in enumerate(cells):
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–º–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å CLIP
            features = self.analyze_cell_content_smart(cell, i, instruction)
            cell_features_list.append(features)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
            if features.get("method") == "CLIP_analysis":
                obj = features.get("detected_object", "?")
                score = features.get("clip_score", 0.0)
                print(f"   –Ø—á–µ–π–∫–∞ {i}: {obj} (CLIP: {score:.3f})")
            else:
                print(f"   –Ø—á–µ–π–∫–∞ {i}: –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ (–±–∞–∑–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑)")
        
        # –£–º–Ω–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π (—Å–Ω–∏–∂–∞–µ–º –ø–æ—Ä–æ–≥ –¥–ª—è –ª—É—á—à–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤)
        matching_cells = self.match_instruction_to_cells_smart(instruction, cell_features_list, threshold=0.22)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è –∫–ª–∏–∫–æ–≤ (—Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ score)
        click_positions = []
        click_indices = []
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–±—ã–≤–∞–Ω–∏—é score –¥–ª—è –ª—É—á—à–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–µ—Ä–≤—ã–º–∏
        matching_cells.sort(key=lambda x: x.get("score", 0), reverse=True)
        
        for match in matching_cells:
            cell_index = match["index"]
            click_indices.append(cell_index)
            click_positions.append(positions[cell_index])
        
        print(f"\nüéØ –ù–∞–π–¥–µ–Ω–æ {len(matching_cells)} –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —è—á–µ–µ–∫: {click_indices}")
        if matching_cells:
            for match in matching_cells:
                reasons = ", ".join(match.get("reasons", []))
                print(f"   ‚Üí –Ø—á–µ–π–∫–∞ {match['index']}: {reasons}")
        
        return click_positions, click_indices
    
    def execute_clicks(self, page, click_positions, click_indices):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–ª–∏–∫–∏ –≤ –±—Ä–∞—É–∑–µ—Ä–µ —á–µ—Ä–µ–∑ Playwright"""
        try:
            # –°–Ω–∞—á–∞–ª–∞ –Ω–∞—Ö–æ–¥–∏–º iframe —Å –∑–∞–¥–∞–Ω–∏–µ–º
            print("üîç –ò—â–µ–º iframe —Å –∑–∞–¥–∞–Ω–∏–µ–º –∫–∞–ø—á–∏...")
            challenge_frame = None
            frames = page.frames
            
            for frame in frames:
                try:
                    frame_title = frame.title()
                    if '—Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –∏—Å–ø—ã—Ç–∞–Ω–∏—è' in frame_title or 'hCaptcha challenge' in frame_title or 'challenge' in frame.url:
                        challenge_frame = frame
                        print(f"‚úÖ –ù–∞–π–¥–µ–Ω iframe: {frame_title}")
                        break
                except Exception as e:
                    continue
            
            if not challenge_frame:
                print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω iframe —Å –∑–∞–¥–∞–Ω–∏–µ–º")
                print("üí° –î–æ—Å—Ç—É–ø–Ω—ã–µ iframe:")
                for i, frame in enumerate(frames):
                    try:
                        print(f"   {i}: {frame.title()} - {frame.url}")
                    except:
                        print(f"   {i}: [iframe –±–µ–∑ –¥–æ—Å—Ç—É–ø–∞]")
                return False
            
            if not click_positions:
                print("‚ùå –ù–µ—Ç —è—á–µ–µ–∫ –¥–ª—è –∫–ª–∏–∫–∞, –Ω–∞–∂–∏–º–∞–µ–º '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'")
                
                # –ò—â–µ–º –∫–Ω–æ–ø–∫—É "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å" –í–ù–£–¢–†–ò iframe
                skip_selectors = [
                    "text=–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å",
                    "text=Skip", 
                    ".refresh-button",
                    "[data-key='skip']",
                    "button:has-text('–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å')",
                    "a:has-text('–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å')",
                    ".challenge-refresh",
                    ".refresh"
                ]
                
                print("üîç –ò—â–µ–º –∫–Ω–æ–ø–∫—É '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å' –≤ iframe...")
                found_skip = False
                
                for selector in skip_selectors:
                    try:
                        print(f"   –ü—Ä–æ–±—É–µ–º —Å–µ–ª–µ–∫—Ç–æ—Ä –≤ iframe: {selector}")
                        challenge_frame.locator(selector).click(timeout=3000)
                        print("‚úÖ –ù–∞–∂–∞–ª–∏ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å' –≤ iframe")
                        found_skip = True
                        break
                    except Exception as e:
                        print(f"   ‚ùå –ù–µ —Å—Ä–∞–±–æ—Ç–∞–ª: {str(e)[:100]}...")
                        continue
                
                if not found_skip:
                    print("‚ö†Ô∏è –ö–Ω–æ–ø–∫–∞ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ iframe")
                    print("üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–∂–∞—Ç—å '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å' –≤—Ä—É—á–Ω—É—é –≤ –±—Ä–∞—É–∑–µ—Ä–µ")
                    return False
                    
                return True
            
            print(f"üñ±Ô∏è –í—ã–ø–æ–ª–Ω—è–µ–º –∫–ª–∏–∫–∏ –ø–æ {len(click_positions)} —è—á–µ–π–∫–∞–º...")
            
            for i, (x, y) in enumerate(click_positions):
                cell_index = click_indices[i]
                print(f"   –ö–ª–∏–∫–∞–µ–º —è—á–µ–π–∫—É {cell_index} –≤ –ø–æ–∑–∏—Ü–∏–∏ ({x}, {y})")
                
                # –ö–ª–∏–∫–∞–µ–º –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º –í–ù–£–¢–†–ò iframe
                challenge_frame.click('body', position={'x': x, 'y': y})
                
                # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∫–ª–∏–∫–∞–º–∏
                page.wait_for_timeout(500)
            
            # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –∏ –∏—â–µ–º –∫–Ω–æ–ø–∫—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –í–ù–£–¢–†–ò iframe
            page.wait_for_timeout(1000)
            
            # –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –∫–Ω–æ–ø–∫—É "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å" –≤ iframe
            try:
                verify_selectors = [
                    "text=–ü—Ä–æ–≤–µ—Ä–∏—Ç—å",
                    "text=Verify", 
                    "text=Submit",
                    "[data-key='verify']",
                    "button[type='submit']",
                    ".verify-button",
                    ".submit-button"
                ]
                
                print("üîç –ò—â–µ–º –∫–Ω–æ–ø–∫—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤ iframe...")
                found_verify = False
                
                for selector in verify_selectors:
                    try:
                        challenge_frame.locator(selector).click(timeout=2000)
                        print("‚úÖ –ù–∞–∂–∞–ª–∏ –∫–Ω–æ–ø–∫—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤ iframe")
                        found_verify = True
                        break
                    except:
                        continue
                
                if not found_verify:
                    print("‚ö†Ô∏è –ö–Ω–æ–ø–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –Ω–æ –∫–ª–∏–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã")
                
                return True
                
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∫–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {e}")
                return True  # –ö–ª–∏–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã, —ç—Ç–æ –≥–ª–∞–≤–Ω–æ–µ
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–ª–∏–∫–æ–≤: {e}")
            return False


def auto_solve_captcha(page, image_path, instruction):
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–µ—à–∞–µ—Ç –∫–∞–ø—á—É"""
    clicker = CaptchaClicker()
    
    # –ü–ª–∞–Ω–∏—Ä—É–µ–º –∫–ª–∏–∫–∏
    click_positions, click_indices = clicker.plan_clicks(image_path, instruction)
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–ª–∏–∫–∏
    success = clicker.execute_clicks(page, click_positions, click_indices)
    
    if success:
        print("üéâ –ö–∞–ø—á–∞ —Ä–µ—à–µ–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!")
    else:
        print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–µ—à–∏—Ç—å –∫–∞–ø—á—É –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏")
    
    return success


if __name__ == "__main__":
    # –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º —Å —É–º–Ω—ã–º –∞–Ω–∞–ª–∏–∑–æ–º
    print("üß† –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–º–Ω–æ–≥–æ –∫–ª–∏–∫–µ—Ä–∞ –∫–∞–ø—á")
    print("="*50)
    
    clicker = CaptchaClicker()
    
    test_image = "analysis/captcha.png"
    test_instruction = "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ, –Ω–∞ —á—ë–º –º–æ–∂–Ω–æ —Å–∏–¥–µ—Ç—å"
    
    if Path(test_image).exists():
        print(f"üì∏ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º: {test_image}")
        print(f"üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è: {test_instruction}")
        print()
        
        positions, indices = clicker.plan_clicks(test_image, test_instruction)
        
        print("\n" + "="*50)
        print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢ –£–ú–ù–û–ì–û –ê–ù–ê–õ–ò–ó–ê:")
        
        if positions:
            print(f"üéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –ö–õ–ò–ö–ù–£–¢–¨ –Ω–∞ —è—á–µ–π–∫–∏ {indices}")
            print(f"üñ±Ô∏è –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∫–ª–∏–∫–æ–≤: {positions}")
        else:
            print("üéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –ù–ê–ñ–ê–¢–¨ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'")
            print("‚ùå –ü–æ–¥—Ö–æ–¥—è—â–∏—Ö –æ–±—ä–µ–∫—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        
    else:
        print(f"‚ùå –¢–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ: {test_image}")
        print("üí° –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ capture.py –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞")
