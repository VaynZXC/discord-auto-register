"""SMS-Activate API client for phone verification."""

from __future__ import annotations

import os
import time
from pathlib import Path
from typing import Optional

import requests


class SMSActivateClient:
    """–ö–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API SMS-Activate."""
    
    BASE_URL = "https://api.sms-activate.org/stubs/handler_api.php"
    
    # –ö–æ–¥—ã —Å–µ—Ä–≤–∏—Å–æ–≤
    SERVICE_DISCORD = "ds"  # Discord
    
    # –°—Ç–∞—Ç—É—Å—ã –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
    STATUS_WAIT_CODE = 1      # –û–∂–∏–¥–∞–Ω–∏–µ SMS
    STATUS_WAIT_RETRY = 3     # –ó–∞–ø—Ä–æ—Å –µ—â–µ –æ–¥–Ω–æ–≥–æ –∫–æ–¥–∞
    STATUS_COMPLETE = 6       # –ó–∞–≤–µ—Ä—à–∏—Ç—å –∞–∫—Ç–∏–≤–∞—Ü–∏—é
    STATUS_CANCEL = 8         # –û—Ç–º–µ–Ω–∏—Ç—å –∞–∫—Ç–∏–≤–∞—Ü–∏—é
    
    def __init__(self, api_key: Optional[str] = None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞.
        
        Args:
            api_key: API –∫–ª—é—á SMS-Activate. –ï—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω, –±–µ—Ä–µ—Ç—Å—è –∏–∑ —Ñ–∞–π–ª–∞ keys/sms_activate.txt
        """
        self.api_key = api_key or self._load_api_key()
        if not self.api_key:
            raise ValueError(
                "API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω! –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª keys/sms_activate.txt —Å –≤–∞—à–∏–º –∫–ª—é—á–æ–º"
            )
    
    def _load_api_key(self) -> Optional[str]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç API –∫–ª—é—á —Ç–æ–ª—å–∫–æ –∏–∑ —Ñ–∞–π–ª–∞ keys/sms_activate.txt"""
        from ..utils import load_api_key
        return load_api_key("sms_activate", "SMS_ACTIVATE_API_KEY")
    
    def _request(self, action: str, **params) -> str:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ API."""
        params["api_key"] = self.api_key
        params["action"] = action
        
        try:
            response = requests.get(self.BASE_URL, params=params, timeout=30)
            response.raise_for_status()
            return response.text.strip()
        except requests.RequestException as e:
            raise Exception(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ SMS-Activate: {e}")
    
    def get_balance(self) -> float:
        """–ü–æ–ª—É—á–∞–µ—Ç –±–∞–ª–∞–Ω—Å –∞–∫–∫–∞—É–Ω—Ç–∞."""
        result = self._request("getBalance")
        
        if result.startswith("ACCESS_BALANCE:"):
            balance_str = result.split(":")[1]
            return float(balance_str)
        else:
            raise Exception(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å: {result}")
    
    def get_number(self, service: str = SERVICE_DISCORD, country: int = 0) -> tuple[str, str]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏.
        
        Args:
            service: –ö–æ–¥ —Å–µ—Ä–≤–∏—Å–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é Discord)
            country: –ö–æ–¥ —Å—Ç—Ä–∞–Ω—ã (0 = –†–æ—Å—Å–∏—è, 1 = –£–∫—Ä–∞–∏–Ω–∞, –∏ —Ç.–¥.)
        
        Returns:
            Tuple (activation_id, phone_number)
        
        Raises:
            Exception: –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–º–µ—Ä
        """
        result = self._request("getNumber", service=service, country=country)
        
        if result.startswith("ACCESS_NUMBER:"):
            # –§–æ—Ä–º–∞—Ç: ACCESS_NUMBER:activation_id:phone_number
            parts = result.split(":")
            activation_id = parts[1]
            phone_number = parts[2]
            return activation_id, phone_number
        elif result == "NO_NUMBERS":
            raise Exception("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤")
        elif result == "NO_BALANCE":
            raise Exception("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ")
        else:
            raise Exception(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–º–µ—Ä: {result}")
    
    def get_status(self, activation_id: str) -> Optional[str]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∏ –∫–æ–¥ SMS (–µ—Å–ª–∏ –ø—Ä–∏—à–µ–ª).
        
        Args:
            activation_id: ID –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
        
        Returns:
            SMS –∫–æ–¥ –∏–ª–∏ None –µ—Å–ª–∏ –∫–æ–¥ –µ—â–µ –Ω–µ –ø—Ä–∏—à–µ–ª
        """
        result = self._request("getStatus", id=activation_id)
        
        if result.startswith("STATUS_OK:"):
            # –§–æ—Ä–º–∞—Ç: STATUS_OK:sms_code
            code = result.split(":")[1]
            return code
        elif result == "STATUS_WAIT_CODE":
            # –û–∂–∏–¥–∞–µ–º –∫–æ–¥
            return None
        elif result == "STATUS_CANCEL":
            raise Exception("–ê–∫—Ç–∏–≤–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
        else:
            # –î—Ä—É–≥–∏–µ —Å—Ç–∞—Ç—É—Å—ã –ø–æ–∫–∞ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
            return None
    
    def set_status(self, activation_id: str, status: int) -> bool:
        """
        –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –∞–∫—Ç–∏–≤–∞—Ü–∏–∏.
        
        Args:
            activation_id: ID –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
            status: –°—Ç–∞—Ç—É—Å (1 - –æ–∂–∏–¥–∞–Ω–∏–µ, 3 - –ø–æ–≤—Ç–æ—Ä, 6 - –∑–∞–≤–µ—Ä—à–∏—Ç—å, 8 - –æ—Ç–º–µ–Ω–∏—Ç—å)
        
        Returns:
            True –µ—Å–ª–∏ —Å—Ç–∞—Ç—É—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ
        """
        result = self._request("setStatus", id=activation_id, status=status)
        return result == "ACCESS_ACTIVATION" or result == "ACCESS_CANCEL"
    
    def wait_for_code(
        self,
        activation_id: str,
        timeout: int = 300,
        check_interval: int = 5
    ) -> Optional[str]:
        """
        –û–∂–∏–¥–∞–µ—Ç –ø–æ–ª—É—á–µ–Ω–∏–µ SMS –∫–æ–¥–∞.
        
        Args:
            activation_id: ID –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
            timeout: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
            check_interval: –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        
        Returns:
            SMS –∫–æ–¥ –∏–ª–∏ None –µ—Å–ª–∏ –≤—Ä–µ–º—è –≤—ã—à–ª–æ
        """
        start_time = time.time()
        
        while time.time() - start_time < timeout:
            try:
                code = self.get_status(activation_id)
                if code:
                    return code
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞: {e}")
            
            time.sleep(check_interval)
        
        # –í—Ä–µ–º—è –≤—ã—à–ª–æ - –æ—Ç–º–µ–Ω—è–µ–º –∞–∫—Ç–∏–≤–∞—Ü–∏—é
        self.set_status(activation_id, self.STATUS_CANCEL)
        return None
    
    def complete_activation(self, activation_id: str) -> bool:
        """–ó–∞–≤–µ—Ä—à–∞–µ—Ç –∞–∫—Ç–∏–≤–∞—Ü–∏—é (–ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–¥–∞)."""
        return self.set_status(activation_id, self.STATUS_COMPLETE)
    
    def cancel_activation(self, activation_id: str) -> bool:
        """–û—Ç–º–µ–Ω—è–µ—Ç –∞–∫—Ç–∏–≤–∞—Ü–∏—é (–µ—Å–ª–∏ –Ω–æ–º–µ—Ä –Ω–µ –ø–æ–¥–æ—à–µ–ª)."""
        return self.set_status(activation_id, self.STATUS_CANCEL)


# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
if __name__ == "__main__":
    try:
        client = SMSActivateClient()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
        balance = client.get_balance()
        print(f"üí∞ –ë–∞–ª–∞–Ω—Å: {balance} —Ä—É–±.")
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä –¥–ª—è Discord
        activation_id, phone = client.get_number(SMSActivateClient.SERVICE_DISCORD)
        print(f"üì± –ü–æ–ª—É—á–µ–Ω –Ω–æ–º–µ—Ä: {phone}")
        print(f"üîë ID –∞–∫—Ç–∏–≤–∞—Ü–∏–∏: {activation_id}")
        
        # –û–∂–∏–¥–∞–µ–º SMS –∫–æ–¥
        print("‚è≥ –û–∂–∏–¥–∞–µ–º SMS –∫–æ–¥...")
        code = client.wait_for_code(activation_id, timeout=300)
        
        if code:
            print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω –∫–æ–¥: {code}")
            # –ó–∞–≤–µ—Ä—à–∞–µ–º –∞–∫—Ç–∏–≤–∞—Ü–∏—é
            client.complete_activation(activation_id)
        else:
            print("‚ùå –ö–æ–¥ –Ω–µ –ø–æ–ª—É—á–µ–Ω - –≤—Ä–µ–º—è –≤—ã—à–ª–æ")
    
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")
