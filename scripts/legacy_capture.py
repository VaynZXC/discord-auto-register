#!/usr/bin/env python3
"""
–ú–æ–¥—É–ª—å –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è –∫–∞–ø—á —á–µ—Ä–µ–∑ –±—Ä–∞—É–∑–µ—Ä–Ω—É—é –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—é.
–î–µ–ª–∞–µ—Ç —Å–∫—Ä–∏–Ω—à–æ—Ç—ã –∑–∞–¥–∞–Ω–∏–π hCaptcha –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ–π—Ä–æ—Å–µ—Ç—è–º–∏.
"""

import time
from pathlib import Path
from playwright.sync_api import sync_playwright, Playwright


def capture_captcha():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞—Ö–≤–∞—Ç–∞ –∫–∞–ø—á–∏"""
    with sync_playwright() as playwright:
        run_captcha_automation(playwright)


def run_captcha_automation(playwright: Playwright):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—é –¥–ª—è –∑–∞—Ö–≤–∞—Ç–∞ –∫–∞–ø—á–∏"""
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±—Ä–∞—É–∑–µ—Ä –≤ –≤–∏–¥–∏–º–æ–º —Ä–µ–∂–∏–º–µ (–±–µ–∑ headless)
    browser = playwright.chromium.launch(headless=False, slow_mo=1000)
    
    try:
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        page = browser.new_page()
        
        print("üåê –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Ç–µ—Å—Ç–æ–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É...")
        page.goto("http://127.0.0.1:5000", wait_until="load")
        
        print("üîç –ò—â–µ–º —á–µ–∫–±–æ–∫—Å hCaptcha...")
        # –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è iframe —Å —á–µ–∫–±–æ–∫—Å–æ–º hCaptcha (–ø–µ—Ä–≤—ã–π iframe —Å —Ñ–ª–∞–∂–∫–æ–º)
        page.wait_for_selector('iframe[title*="—Ñ–ª–∞–∂–∫–æ–º"]', timeout=10000)
        
        # –ù–∞—Ö–æ–¥–∏–º iframe —Å —á–µ–∫–±–æ–∫—Å–æ–º –ø–æ title
        checkbox_frame = page.frame_locator('iframe[title*="—Ñ–ª–∞–∂–∫–æ–º"]')
        
        print("‚úÖ –ö–ª–∏–∫–∞–µ–º –ø–æ —á–µ–∫–±–æ–∫—Å—É hCaptcha...")
        # –ö–ª–∏–∫–∞–µ–º –ø–æ —á–µ–∫–±–æ–∫—Å—É –≤–Ω—É—Ç—Ä–∏ iframe
        checkbox_frame.locator('#checkbox').click()
        
        print("‚è≥ –û–∂–∏–¥–∞–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è –∫–∞–ø—á–∏...")
        # –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è –≤—Ç–æ—Ä–æ–≥–æ iframe —Å –∑–∞–¥–∞–Ω–∏–µ–º (—É–≤–µ–ª–∏—á–∏–≤–∞–µ–º timeout)
        try:
            page.wait_for_selector('iframe[title*="—Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –∏—Å–ø—ã—Ç–∞–Ω–∏—è"]', timeout=20000)
            print("‚úÖ Iframe —Å –∑–∞–¥–∞–Ω–∏–µ–º –Ω–∞–π–¥–µ–Ω")
        except:
            # –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
            try:
                page.wait_for_selector('iframe[src*="hcaptcha.com"]', timeout=10000)
                print("‚úÖ –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π iframe –Ω–∞–π–¥–µ–Ω")
            except:
                print("‚ö†Ô∏è Iframe —Å –∑–∞–¥–∞–Ω–∏–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º...")
        
        # –ñ–¥–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–¥–∞–Ω–∏—è  
        time.sleep(5)
        
        print("üì∑ –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –∫–∞–ø—á–∏...")
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        analysis_dir = Path("analysis")
        analysis_dir.mkdir(exist_ok=True)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç (–æ–¥–∏–Ω —Ñ–∞–π–ª, –∑–∞–º–µ–Ω—è–µ—Ç—Å—è)
        challenge_frame = page.frame_locator('iframe[title*="—Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –∏—Å–ø—ã—Ç–∞–Ω–∏—è"]')
        screenshot_path = analysis_dir / "captcha.png"
        challenge_frame.locator('body').screenshot(path=str(screenshot_path))
        print(f"üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç: {screenshot_path}")
        
        # –ë—ã—Å—Ç—Ä—ã–π –∞–Ω–∞–ª–∏–∑ DOM —Å—Ç—Ä—É–∫—Ç—É—Ä—ã  
        try:
            # –ü–æ–ª—É—á–∞–µ–º frame object
            challenge_frames = page.frames
            challenge_frame_obj = None
            for frame in challenge_frames:
                if '—Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –∏—Å–ø—ã—Ç–∞–Ω–∏—è' in frame.title() or 'hCaptcha challenge' in frame.title():
                    challenge_frame_obj = frame
                    break
                    
            if challenge_frame_obj:
                print("üîç –ë—ã—Å—Ç—Ä—ã–π –∞–Ω–∞–ª–∏–∑ DOM:")
                
                # –ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π
                try:
                    instructions = challenge_frame_obj.locator('.prompt-text, .challenge-prompt, [class*="prompt"]').all()
                    if instructions:
                        for i, instruction in enumerate(instructions):
                            text = instruction.inner_text()
                            print(f"  üìù –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è {i+1}: {text}")
                except:
                    pass
                
                # –ò—â–µ–º —è—á–µ–π–∫–∏
                try:
                    cells = challenge_frame_obj.locator('[class*="cell"], [class*="tile"], .task-image').all()
                    if cells:
                        print(f"  üì¶ –ù–∞–π–¥–µ–Ω–æ —è—á–µ–µ–∫: {len(cells)}")
                except:
                    pass
                
            else:
                print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ iframe —Å –∑–∞–¥–∞–Ω–∏–µ–º")
                
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ iframe: {e}")
        
        print(f"\n‚úÖ –°–∫—Ä–∏–Ω—à–æ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: {screenshot_path}")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–ø—á—É —Å –ø–æ–º–æ—â—å—é –ò–ò
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–ø—á—É –¢–û–õ–¨–ö–û —á–µ—Ä–µ–∑ GPT-4 Vision
        print("\nü§ñ GPT-4 Vision –∞–Ω–∞–ª–∏–∑...")
        solution_path = None
        
        try:
            from captcha_analyzer import analyze_captcha_image
            solution_path = analyze_captcha_image(str(screenshot_path))
            
            if solution_path:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ä–µ—à–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ä–µ–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑, –∞ –Ω–µ –æ—à–∏–±–∫—É
                try:
                    with open(solution_path, 'r', encoding='utf-8') as f:
                        content = f.read()
                    if "–Ω–µ —Å–º–æ–≥–ª–∞ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å" in content or len(content) < 100:
                        print("‚ö†Ô∏è –ò–ò –¥–∞–ª –Ω–µ–ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç, –ø—Ä–æ–±—É–µ–º OCR...")
                        raise Exception("–ò–ò –º–æ–¥–µ–ª—å –¥–∞–ª–∞ –Ω–µ–ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç")
                    else:
                        print(f"üß† –ò–ò –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω! –†–µ—à–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {solution_path}")
                except:
                    print("‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ä–µ—à–µ–Ω–∏—è, –ø—Ä–æ–±—É–µ–º OCR...")
                    raise Exception("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ä–µ—à–µ–Ω–∏—è")
            else:
                print("‚ö†Ô∏è –ò–ò –∞–Ω–∞–ª–∏–∑ –Ω–µ —É–¥–∞–ª—Å—è, –ø—Ä–æ–±—É–µ–º OCR...")
                raise Exception("–ò–ò –º–æ–¥–µ–ª—å –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∞")
                
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ò–ò –∞–Ω–∞–ª–∏–∑–∞: {e}")
            
            # Fallback –∫ –ø—Ä–æ—Å—Ç–æ–º—É OCR –∞–Ω–∞–ª–∏–∑—É
            print("\nüìñ –ü—Ä–æ–±—É–µ–º –ø—Ä–æ—Å—Ç–æ–π OCR –∞–Ω–∞–ª–∏–∑...")
            try:
                from simple_analyzer import analyze_with_ocr, save_simple_analysis
                
                ocr_result = analyze_with_ocr(str(screenshot_path))
                if ocr_result and "–æ—à–∏–±–∫–∞" not in ocr_result.lower():
                    solution_path = save_simple_analysis(str(screenshot_path), ocr_result)
                    print(f"üìù OCR –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω! –†–µ—à–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {solution_path}")
                else:
                    print(f"‚ö†Ô∏è OCR –∞–Ω–∞–ª–∏–∑ —Ç–æ–∂–µ –Ω–µ —É–¥–∞–ª—Å—è: {ocr_result}")
                    
            except ImportError:
                print("‚ùå EasyOCR –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install easyocr")
            except Exception as ocr_error:
                print(f"‚ùå –û—à–∏–±–∫–∞ OCR –∞–Ω–∞–ª–∏–∑–∞: {ocr_error}")
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å –∞–Ω–∞–ª–∏–∑, –ø—Ä–æ–±—É–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–µ—à–∏—Ç—å –∫–∞–ø—á—É
        if solution_path:
            print("\nü§ñ –ü—Ä–æ–±—É–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–µ—à–∏—Ç—å –∫–∞–ø—á—É...")
            try:
                from captcha_clicker import auto_solve_captcha
                import json
                
                # –ß–∏—Ç–∞–µ–º –∞–Ω–∞–ª–∏–∑ –∏ –∏–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é
                analysis_json_path = Path("solutions/analysis.json")
                if analysis_json_path.exists():
                    with open(analysis_json_path, 'r', encoding='utf-8') as f:
                        analysis_data = json.load(f)
                    
                    # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –∏–∑ –∞–Ω–∞–ª–∏–∑–∞
                    analysis_text = analysis_data.get('analysis', '')
                    
                    # –ò—â–µ–º —Å—Ç—Ä–æ–∫—É —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π
                    instruction = None
                    for line in analysis_text.split('\n'):
                        if '–ü–û–õ–ù–ê–Ø –ò–ù–°–¢–†–£–ö–¶–ò–Ø:' in line:
                            # –°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–æ–∫–∞ –ø–æ—Å–ª–µ "–ü–û–õ–ù–ê–Ø –ò–ù–°–¢–†–£–ö–¶–ò–Ø:"
                            instruction_line = analysis_text.split('–ü–û–õ–ù–ê–Ø –ò–ù–°–¢–†–£–ö–¶–ò–Ø:')[1].split('\n')[1]
                            # –£–±–∏—Ä–∞–µ–º –∫–∞–≤—ã—á–∫–∏ –∏ –ª–∏—à–Ω–∏–π —Ç–µ–∫—Å—Ç
                            instruction = instruction_line.strip().strip('"')
                            # –£–±–∏—Ä–∞–µ–º "–° –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å" –∏ –ø–æ–¥–æ–±–Ω—ã–µ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã
                            instruction = instruction.replace(' –° –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', '').replace(' –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', '').strip()
                            break
                    
                    if not instruction:
                        # Fallback - –∏—â–µ–º –ø–µ—Ä–≤—É—é –∑–Ω–∞—á–∏–º—É—é –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é
                        lines = analysis_text.split('\n')
                        for line in lines:
                            if any(word in line.lower() for word in ['–≤—ã–±–µ—Ä–∏—Ç–µ', '–Ω–∞–π–¥–∏—Ç–µ', 'select', 'choose']):
                                instruction = line.split('(—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å')[0].strip()
                                if instruction.endswith('.'):
                                    instruction = instruction[:-1]
                                break
                    
                    if instruction and len(instruction) > 10:
                        print(f"üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è: {instruction}")
                        
                        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–µ—à–∞–µ–º –∫–∞–ø—á—É
                        success = auto_solve_captcha(page, str(screenshot_path), instruction)
                        
                        if success:
                            print("üéâ –ö–∞–ø—á–∞ —Ä–µ—à–µ–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!")
                            print("‚è≥ –ñ–¥–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞...")
                            page.wait_for_timeout(5000)  # –ñ–¥–µ–º –æ–±—Ä–∞–±–æ—Ç–∫–∏
                        else:
                            print("‚ö†Ô∏è –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–µ—à–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å")
                    else:
                        print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –¥–ª—è –∞–≤—Ç–æ–∫–ª–∏–∫–æ–≤")
                else:
                    print("‚ö†Ô∏è –§–∞–π–ª –∞–Ω–∞–ª–∏–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    
            except ImportError:
                print("‚ö†Ô∏è –ú–æ–¥—É–ª—å –∞–≤—Ç–æ–∫–ª–∏–∫–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è: {e}")
        
        if not solution_path:
            print("üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: pip install -r requirements.txt")
        
        print("\n‚ú® –ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞! –ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –±—Ä–∞—É–∑–µ—Ä–∞...")
        input()  # –û–∂–∏–¥–∞–µ–º –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        print("–£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ server.py –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 5000")
    finally:
        browser.close()


if __name__ == "__main__":
    print("ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞—Ö–≤–∞—Ç hCaptcha")
    print("üìã –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ server.py –∑–∞–ø—É—â–µ–Ω –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º")
    print()
    capture_captcha()
