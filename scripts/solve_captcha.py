#!/usr/bin/env python3
"""
–ß–∏—Å—Ç–∞—è —Å–∏—Å—Ç–µ–º–∞ –∑–∞—Ö–≤–∞—Ç–∞ –∏ —Ä–µ—à–µ–Ω–∏—è –∫–∞–ø—á —á–µ—Ä–µ–∑ GPT-4 Vision.
–ë–µ–∑ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –Ω–µ–π—Ä–æ–Ω–æ–∫ - —Ç–æ–ª—å–∫–æ GPT-4 –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Ç–æ—á–Ω–æ—Å—Ç–∏.
"""

from __future__ import annotations

import sys
from pathlib import Path as _Path

ROOT = _Path(__file__).resolve().parent.parent
if str(ROOT) not in sys.path:
    sys.path.insert(0, str(ROOT))

import json
import time
from pathlib import Path
from playwright.sync_api import sync_playwright, Playwright


def execute_gpt_solution_smart(page, gpt_solution, screenshot_path, structure_info=None):
    """–£–º–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ä–µ—à–µ–Ω–∏—è GPT-4 —Å –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç"""
    try:
        if not gpt_solution or "error" in gpt_solution:
            print("‚ùå –ù–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è –æ—Ç GPT-4")
            return False
        
        action = gpt_solution.get("recommendation", {}).get("action", "skip")
        target_elements = gpt_solution.get("recommendation", {}).get("target_ids", [])
        interactive_elements = gpt_solution.get("interactive_elements", [])
        
        print(f"üéØ GPT-4 —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç: {action}")
        
        if action == "skip":
            print("‚è≠Ô∏è –ù–∞–∂–∏–º–∞–µ–º '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'...")
            return click_skip_button_smart(page)
        
        if action != "interact" or not target_elements:
            print("‚ùå –ù–µ—Ç —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è –∫–ª–∏–∫–∞")
            return False
        
        # –ù–∞—Ö–æ–¥–∏–º iframe —Å –∑–∞–¥–∞–Ω–∏–µ–º
        print("üîç –î–µ—Ç–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ iframe —Å canvas...")
        challenge_frame = None
        frames = page.frames
        
        print(f"üìã –í—Å–µ–≥–æ iframe: {len(frames)}")
        
        for i, frame in enumerate(frames):
            try:
                frame_title = frame.title()
                frame_url = frame.url
                print(f"   Frame {i}: '{frame_title}' - {frame_url}")
                
                # –ò—â–µ–º iframe –∏–º–µ–Ω–Ω–æ —Å –∑–∞–¥–∞–Ω–∏–µ–º (–ø–æ URL —Ç–æ–∂–µ)
                if ('—Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –∏—Å–ø—ã—Ç–∞–Ω–∏—è' in frame_title or 
                    'hCaptcha challenge' in frame_title or
                    'challenge' in frame_url or
                    'hcaptcha.com' in frame_url):
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤ —ç—Ç–æ–º iframe –µ—Å—Ç—å canvas
                    try:
                        canvas_count = frame.locator('canvas').count()
                        print(f"     Canvas –≤ iframe: {canvas_count}")
                        
                        if canvas_count > 0:
                            challenge_frame = frame
                            print(f"‚úÖ –ù–∞–π–¥–µ–Ω iframe —Å canvas: {frame_title}")
                            break
                        else:
                            print(f"     ‚ùå Canvas –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —ç—Ç–æ–º iframe")
                    except Exception as canvas_err:
                        print(f"     ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ canvas: {canvas_err}")
                        
            except Exception as e:
                print(f"   Frame {i}: –æ—à–∏–±–∫–∞ - {e}")
                continue
        
        if not challenge_frame:
            print("‚ùå Iframe —Å canvas –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã canvas –≤ iframe
        try:
            canvas_info = challenge_frame.locator('canvas').bounding_box()
            canvas_width = canvas_info['width']
            canvas_height = canvas_info['height']
            print(f"üìê –†–∞–∑–º–µ—Ä—ã canvas: {canvas_width}x{canvas_height}")
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–æ–≤ canvas: {e}")
            print("   –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã")
            canvas_width, canvas_height = 500, 430
            canvas_info = {"x": 0, "y": 0, "width": canvas_width, "height": canvas_height}
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ø–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ (–æ—Ç –∫–æ—Ç–æ—Ä–æ–≥–æ —Å–¥–µ–ª–∞–Ω —Å–∫—Ä–∏–Ω—à–æ—Ç)
        try:
            container_locator = challenge_frame.locator('.challenge-container')
            container_info = container_locator.bounding_box()
            container_width = container_info['width']
            container_height = container_info['height']
            offset_x = canvas_info['x'] - container_info['x']
            offset_y = canvas_info['y'] - container_info['y']
            print(f"üß≠ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä: {container_width}x{container_height}, —Å–º–µ—â–µ–Ω–∏–µ canvas: ({offset_x:.1f}, {offset_y:.1f})")
        except Exception as e:
            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–∞–∑–º–µ—Ä—ã –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞: {e}")
            container_info = None
            container_width = img_width
            container_height = img_height
            offset_x = 0
            offset_y = 0

        # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è  
        from PIL import Image
        try:
            img = Image.open(screenshot_path)
            img_width, img_height = img.size
            print(f"üìê –†–∞–∑–º–µ—Ä—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {img_width}x{img_height}")
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ä–∞–∑–º–µ—Ä–æ–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
            img_width, img_height = container_width, container_height

        # –ï—Å–ª–∏ GPT –≤–µ—Ä–Ω—É–ª —ç–ª–µ–º–µ–Ω—Ç—ã –∏ –º—ã —Ä–∞–±–æ—Ç–∞–µ–º —Å —Å–µ—Ç–∫–æ–π, –ø–æ–ø—Ä–æ–±—É–µ–º —É—Ç–æ—á–Ω–∏—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
        tile_grid = None
        try:
            from PIL import Image
            img = Image.open(screenshot_path)
            img_width, img_height = img.size
            print(f"üìê –†–∞–∑–º–µ—Ä—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {img_width}x{img_height}")
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ä–∞–∑–º–µ—Ä–æ–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
            img_width = img_height = None
            img = None

        # –í—ã—á–∏—Å–ª—è–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è
        scale_x = canvas_width / (img_width if img_width else canvas_width)
        scale_y = canvas_height / (img_height if img_height else canvas_height)
        print(f"üîß –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è: x={scale_x:.3f}, y={scale_y:.3f}")

        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–æ–π –∫–∞—Ä—Ç—ã –∫–æ–Ω—Ç—É—Ä–Ω—ã—Ö —Ü–µ–Ω—Ç—Ä–æ–≤ –∏ —É—Ç–æ—á–Ω–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
        contour_info = {}
        if img and gpt_solution.get("interactive_elements"):
            try:
                import cv2
                import numpy as np

                arr = np.array(img.convert('RGB'))
                height, width = arr.shape[:2]

                grid_cells = {}
                if structure_info:
                    for region in structure_info.regions:
                        if region.kind == "grid" and region.cells:
                            for cell in region.cells:
                                grid_cells[cell.id] = cell

                for element in gpt_solution["interactive_elements"]:
                    eid = element.get("id")
                    center = element.get("center") or {"x": element.get("x", 0), "y": element.get("y", 0)}
                    bbox = element.get("bbox") or {}

                    raw_cx = float(center.get("x", 0))
                    raw_cy = float(center.get("y", 0))

                    if eid in grid_cells:
                        cell = grid_cells[eid]
                        bx, by, bw, bh = cell.bbox
                        raw_cx, raw_cy = cell.center
                    else:
                        bw = float(bbox.get("width", 80))
                        bh = float(bbox.get("height", 80))
                        bx = float(bbox.get("x", raw_cx - bw / 2))
                        by = float(bbox.get("y", raw_cy - bh / 2))

                    x0 = int(np.clip(np.floor(bx), 0, width - 1))
                    y0 = int(np.clip(np.floor(by), 0, height - 1))
                    x1 = int(np.clip(np.ceil(bx + bw), x0 + 1, width))
                    y1 = int(np.clip(np.ceil(by + bh), y0 + 1, height))

                    roi = arr[y0:y1, x0:x1]
                    if roi.size == 0:
                        continue

                    gray_roi = cv2.cvtColor(roi, cv2.COLOR_RGB2GRAY)
                    edges = cv2.Canny(gray_roi, 40, 140)
                    coords = np.column_stack(np.where(edges > 0))

                    if len(coords) > 10:
                        min_y, min_x = coords.min(axis=0)
                        max_y, max_x = coords.max(axis=0)
                        center_x = x0 + (min_x + max_x) / 2.0
                        center_y = y0 + (min_y + max_y) / 2.0
                        tight_bbox = (
                            x0 + min_x,
                            y0 + min_y,
                            max(4.0, max_x - min_x),
                            max(4.0, max_y - min_y)
                        )
                        contour_info[eid] = {
                            "center": (center_x, center_y),
                            "bbox": tight_bbox
                        }
                    else:
                        contour_info[eid] = {
                            "center": (raw_cx, raw_cy),
                            "bbox": (bx, by, bw, bh)
                        }
            except Exception as e:
                print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã—á–∏—Å–ª–∏—Ç—å –∫–æ–Ω—Ç—É—Ä–Ω—ã–µ —Ü–µ–Ω—Ç—Ä—ã: {e}")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º overlay —Å —É—Ç–æ—á–Ω–µ–Ω–Ω—ã–º–∏ —Ü–µ–Ω—Ç—Ä–∞–º–∏ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π
        overlay_path = None
        if img and gpt_solution.get("interactive_elements"):
            try:
                from PIL import ImageDraw, ImageFont
                overlay = img.copy().convert('RGB')
                draw = ImageDraw.Draw(overlay)
                try:
                    font = ImageFont.truetype("arial.ttf", 16)
                except:
                    font = ImageFont.load_default()

                if structure_info:
                    ia = structure_info.instruction_area
                    draw.rectangle([ia[0], ia[1], ia[0] + ia[2], ia[1] + ia[3]], outline="#ffaa00", width=2)
                    ba = structure_info.body_area
                    draw.rectangle([ba[0], ba[1], ba[0] + ba[2], ba[1] + ba[3]], outline="#00ffaa", width=2)

                    for region in structure_info.regions:
                        rx, ry, rw, rh = region.bbox
                        draw.rectangle([rx, ry, rx + rw, ry + rh], outline="yellow", width=2)
                        draw.text((rx + 5, ry + 5), f"{region.kind}", fill="yellow", font=font)
                        if region.cells:
                            for cell in region.cells:
                                cx, cy, cw, ch = cell.bbox
                                draw.rectangle([cx, cy, cx + cw, cy + ch], outline="#00aaff", width=2)

                for element in gpt_solution["interactive_elements"]:
                    eid = element.get("id")
                    content = element.get("content", "?")
                    center = element.get("center") or {"x": element.get("x", 0), "y": element.get("y", 0)}
                    bbox = element.get("bbox") or {}
                    cx, cy = center.get("x", 0), center.get("y", 0)
                    bw = bbox.get("width", 80)
                    bh = bbox.get("height", 80)
                    bx = bbox.get("x", cx - bw / 2)
                    by = bbox.get("y", cy - bh / 2)

                    draw.rectangle([bx, by, bx + bw, by + bh], outline="red", width=2)
                    draw.ellipse([cx - 5, cy - 5, cx + 5, cy + 5], fill="red")

                    contour_data = contour_info.get(eid)
                    if contour_data:
                        ccx, ccy = contour_data["center"]
                        tbx, tby, tw, th = contour_data["bbox"]
                        draw.rectangle([tbx, tby, tbx + tw, tby + th], outline="#00ff88", width=2)
                        draw.ellipse([ccx - 6, ccy - 6, ccx + 6, ccy + 6], outline="lime", width=3)

                    draw.text((bx, by - 18), f"#{eid}: {content}", fill="red", font=font)

                overlay_path = Path(screenshot_path).with_name("gpt_view_overlay.png")
                overlay.save(overlay_path)
                print(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω –æ–≤–µ—Ä–ª–µ–π GPT: {overlay_path}")
            except Exception as e:
                print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å overlay: {e}")
        
        # –ö–ª–∏–∫–∞–µ–º –ø–æ –∫–∞–∂–¥–æ–º—É —Ü–µ–ª–µ–≤–æ–º—É —ç–ª–µ–º–µ–Ω—Ç—É —Å –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        print(f"üñ±Ô∏è –í—ã–ø–æ–ª–Ω—è–µ–º –∫–ª–∏–∫–∏ –ø–æ {len(target_elements)} —ç–ª–µ–º–µ–Ω—Ç–∞–º...")
        
        for element_id in target_elements:
            if element_id < len(interactive_elements):
                element = interactive_elements[element_id]
                center = element.get("center") or {"x": element.get("x", 0), "y": element.get("y", 0)}
                bbox = element.get("bbox")
                description = element.get("content")

                raw_x = center.get("x", 0)
                raw_y = center.get("y", 0)
                width = height = None

                if bbox:
                    bx = bbox.get("x", raw_x - bbox.get("width", 0) / 2)
                    by = bbox.get("y", raw_y - bbox.get("height", 0) / 2)
                    width = bbox.get("width")
                    height = bbox.get("height")
                    raw_x = bx + (width or 0) / 2
                    raw_y = by + (height or 0) / 2

                    contour_data = contour_info.get(element_id)
                    if contour_data:
                        print(f"   üéØ –ö–æ–Ω—Ç—É—Ä–Ω—ã–π —Ü–µ–Ω—Ç—Ä –Ω–∞–π–¥–µ–Ω: {contour_data['center']}")
                        raw_x, raw_y = contour_data["center"]

                gpt_solution.setdefault("debug_clicks", []).append({
                    "element_id": element_id,
                    "description": description,
                    "center": center,
                    "bbox": bbox,
                    "contour_center": contour_info.get(element_id, {}).get("center"),
                    "size": [width, height]
                })

                css_x = raw_x * scale_x + offset_x
                css_y = raw_y * scale_y + offset_y

                print(f"   GPT –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã (–æ—Ä–∏–≥.): ({raw_x}, {raw_y})")
                print(f"   –°–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: ({css_x:.1f}, {css_y:.1f})")
                print(f"   –ö–ª–∏–∫–∞–µ–º: {description}")
                
                # –î–æ–±–∞–≤–ª—è–µ–º –≤–∏–∑—É–∞–ª—å–Ω—É—é –æ—Ç–ª–∞–¥–∫—É - –ø–æ–∫–∞–∂–µ–º –≥–¥–µ –∫–ª–∏–∫–∞–µ–º
                print(f"     üéØ –í—ã–ø–æ–ª–Ω—è–µ–º –∫–ª–∏–∫...")
                
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—Ç–∏–≤–Ω—ã–µ mouse —Å–æ–±—ã—Ç–∏—è Playwright (—Å–∞–º—ã–µ —á–µ–ª–æ–≤–µ–∫–æ–ø–æ–¥–æ–±–Ω—ã–µ)
                try:
                    print(f"     üñ±Ô∏è –ù–∞—Ç–∏–≤–Ω—ã–π mouse –∫–ª–∏–∫ Playwright...")
                    
                    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–∑–∏—Ü–∏—é canvas –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ (–º–æ–∂–µ—Ç –æ—Ç–ª–∏—á–∞—Ç—å—Å—è –æ—Ç –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞)
                    canvas_info = challenge_frame.locator('canvas').bounding_box()
                    
                    # –ê–±—Å–æ–ª—é—Ç–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã = –ø–æ–∑–∏—Ü–∏—è canvas + —Å–º–µ—â—ë–Ω–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤–Ω—É—Ç—Ä–∏ canvas
                    abs_x = canvas_info['x'] + css_x
                    abs_y = canvas_info['y'] + css_y
                    
                    print(f"     üìç Canvas –ø–æ–∑–∏—Ü–∏—è: ({canvas_info['x']}, {canvas_info['y']})")
                    print(f"     üìç CSS –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø–æ—Å–ª–µ –º–∞—Å—à—Ç–∞–±–∞: ({css_x:.1f}, {css_y:.1f})")
                    print(f"     üìç –ê–±—Å–æ–ª—é—Ç–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: ({abs_x:.1f}, {abs_y:.1f})")
                    
                    # –ò–º–∏—Ç–∏—Ä—É–µ–º —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ –º—ã—à–∏ + –∫–ª–∏–∫
                    page.mouse.move(abs_x - 15, abs_y - 15)  # –ü–æ–¥–≤–æ–¥–∏–º –º—ã—à—å
                    page.wait_for_timeout(300)
                    
                    page.mouse.move(abs_x, abs_y)  # –ù–∞–≤–æ–¥–∏–º —Ç–æ—á–Ω–æ
                    page.wait_for_timeout(200)
                    
                    page.mouse.down()  # –ù–∞–∂–∏–º–∞–µ–º
                    page.wait_for_timeout(100)
                    
                    page.mouse.up()  # –û—Ç–ø—É—Å–∫–∞–µ–º
                    page.wait_for_timeout(150)
                    
                    print(f"     ‚úÖ –ù–∞—Ç–∏–≤–Ω—ã–π mouse –∫–ª–∏–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω")
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –≤–∏–∑—É–∞–ª—å–Ω—É—é –æ—Ç–º–µ—Ç–∫—É –≤ canvas –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö
                    try:
                        # –î–ª—è –æ—Ç–º–µ—Ç–∫–∏ –Ω–∞ canvas –Ω—É–∂–Ω–æ —É—á–µ—Å—Ç—å –º–∞—Å—à—Ç–∞–±
                        mark_x = raw_x * scale_x
                        mark_y = raw_y * scale_y
                        mark_label = f"‚úì{element_id}"

                        challenge_frame.evaluate(f"""
                            const canvas = document.querySelector('canvas');
                            if (canvas) {{
                                const ctx = canvas.getContext('2d');
                                ctx.fillStyle = '#00FF00';
                                ctx.beginPath();
                                ctx.arc({mark_x}, {mark_y}, 20, 0, 2 * Math.PI);
                                ctx.fill();
                                ctx.fillStyle = '#000';
                                ctx.font = 'bold 18px Arial';
                                ctx.textAlign = 'center';
                                ctx.fillText('{mark_label}', {mark_x}, {mark_y} + 6);
                            }}
                        """)
                        print(f"     üü¢ –î–æ–±–∞–≤–ª–µ–Ω–∞ –∑–µ–ª–µ–Ω–∞—è –æ—Ç–º–µ—Ç–∫–∞ {mark_label} –≤ canvas({mark_x:.1f},{mark_y:.1f})")
                    except Exception as e:
                        print(f"     ‚ö†Ô∏è –û—Ç–º–µ—Ç–∫–∞ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞: {e}")
                        
                except Exception as e:
                    print(f"     ‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Ç–∏–≤–Ω–æ–≥–æ –∫–ª–∏–∫–∞: {e}")
                    
                    # Fallback - –ø–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ force
                    try:
                        print(f"     üîÑ –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ - force –∫–ª–∏–∫...")
                        challenge_frame.locator('canvas').click(
                            position={'x': raw_x, 'y': raw_y}, 
                            force=True,
                            timeout=3000
                        )
                        print(f"     ‚úÖ Force –∫–ª–∏–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω")
                    except Exception as e2:
                        print(f"     ‚ùå –í—Å–µ –º–µ—Ç–æ–¥—ã –∫–ª–∏–∫–æ–≤ –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å: {e2}")
                        return False
                
                # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∫–ª–∏–∫–∞–º–∏
                page.wait_for_timeout(1200)
        
        # –ñ–¥–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        page.wait_for_timeout(2000)
        print("‚úÖ –í—Å–µ –∫–ª–∏–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã, –∂–¥–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞...")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —É–º–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è GPT-4 —Ä–µ—à–µ–Ω–∏—è: {e}")
        import traceback
        traceback.print_exc()
        return False


def click_skip_button_smart(page):
    """–£–º–Ω–æ–µ –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"""
    try:
        frames = page.frames
        for frame in frames:
            try:
                frame_title = frame.title()
                frame_url = frame.url
                if 'hcaptcha' in frame_url.lower() or 'hCaptcha' in frame_title:
                    skip_selectors = ["text=–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", "text=Skip", ".refresh-button"]
                    for selector in skip_selectors:
                        try:
                            frame.locator(selector).click(timeout=3000)
                            print("‚úÖ –ù–∞–∂–∞–ª–∏ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'")
                            return True
                        except:
                            continue
            except:
                continue
        return False
    except:
        return False


def run_captcha_automation(playwright: Playwright):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—é –¥–ª—è –∑–∞—Ö–≤–∞—Ç–∞ –∏ —Ä–µ—à–µ–Ω–∏—è –∫–∞–ø—á–∏ —á–µ—Ä–µ–∑ GPT-4"""
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±—Ä–∞—É–∑–µ—Ä –≤ –≤–∏–¥–∏–º–æ–º —Ä–µ–∂–∏–º–µ
    browser = playwright.chromium.launch(headless=False, slow_mo=1000)
    
    try:
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        page = browser.new_page()
        
        print("üåê –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Ç–µ—Å—Ç–æ–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É...")
        page.goto("http://127.0.0.1:5000", wait_until="load")
        
        print("üîç –ò—â–µ–º —á–µ–∫–±–æ–∫—Å hCaptcha...")
        # –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è iframe —Å —á–µ–∫–±–æ–∫—Å–æ–º hCaptcha
        page.wait_for_selector('iframe[title*="—Ñ–ª–∞–∂–∫–æ–º"]', timeout=10000)
        
        # –ù–∞—Ö–æ–¥–∏–º iframe —Å —á–µ–∫–±–æ–∫—Å–æ–º –ø–æ title
        checkbox_frame = page.frame_locator('iframe[title*="—Ñ–ª–∞–∂–∫–æ–º"]')
        
        print("‚úÖ –ö–ª–∏–∫–∞–µ–º –ø–æ —á–µ–∫–±–æ–∫—Å—É hCaptcha...")
        # –ö–ª–∏–∫–∞–µ–º –ø–æ —á–µ–∫–±–æ–∫—Å—É –≤–Ω—É—Ç—Ä–∏ iframe
        checkbox_frame.locator('#checkbox').click()
        
        print("‚è≥ –û–∂–∏–¥–∞–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è –∫–∞–ø—á–∏...")
        # –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è –≤—Ç–æ—Ä–æ–≥–æ iframe —Å –∑–∞–¥–∞–Ω–∏–µ–º (—É–≤–µ–ª–∏—á–∏–≤–∞–µ–º timeout)
        try:
            page.wait_for_selector('iframe[title*="—Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –∏—Å–ø—ã—Ç–∞–Ω–∏—è"]', timeout=20000)
            print("‚úÖ Iframe —Å –∑–∞–¥–∞–Ω–∏–µ–º –Ω–∞–π–¥–µ–Ω")
        except:
            # –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
            try:
                page.wait_for_selector('iframe[src*="hcaptcha.com"]', timeout=10000)
                print("‚úÖ –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π iframe –Ω–∞–π–¥–µ–Ω")
            except:
                print("‚ö†Ô∏è Iframe —Å –∑–∞–¥–∞–Ω–∏–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º...")
        
        # –ñ–¥–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–¥–∞–Ω–∏—è  
        time.sleep(5)
        
        print("üì∑ –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –∫–∞–ø—á–∏...")
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        analysis_dir = Path("analysis")
        analysis_dir.mkdir(exist_ok=True)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –∏–º–µ–Ω–Ω–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ —Å –∑–∞–¥–∞–Ω–∏–µ–º
        challenge_frame = page.frame_locator('iframe[title*="—Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –∏—Å–ø—ã—Ç–∞–Ω–∏—è"]')
        screenshot_path = analysis_dir / "captcha.png"
        
        # –ü—Ä–æ–±—É–µ–º —Å–¥–µ–ª–∞—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç –∏–º–µ–Ω–Ω–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –∑–∞–¥–∞–Ω–∏—è (–ø–æ–ª–Ω—ã–π)
        try:
            challenge_frame.locator('.challenge-container').screenshot(path=str(screenshot_path))
            print(f"üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç –ø–æ–ª–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞: {screenshot_path}")
        except:
            # Fallback –∫ —Å–∫—Ä–∏–Ω—à–æ—Ç—É –≤—Å–µ–≥–æ body
            try:
                challenge_frame.locator('body').screenshot(path=str(screenshot_path))
                print(f"üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç body (fallback): {screenshot_path}")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞: {e}")
                return
        
        # –¢–û–õ–¨–ö–û GPT-4 Vision –∞–Ω–∞–ª–∏–∑
        print("\nü§ñ –ó–∞–ø—É—Å–∫ GPT-4 Vision –∞–Ω–∞–ª–∏–∑–∞...")
        
        try:
            from src.vision import detect_structure
            structure_info = detect_structure(str(screenshot_path))
        except Exception as structure_error:
            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É: {structure_error}")
            structure_info = None

        try:
            from src.gpt import GPTAnalyzer
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–ø—á—É —á–µ—Ä–µ–∑ GPT-4 (–ø–æ–ª–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ)
            gpt_analyzer = GPTAnalyzer()
            gpt_solution = gpt_analyzer.analyze_captcha(str(screenshot_path))

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ, —á—Ç–æ –≤–∏–¥–∏—Ç GPT
            if gpt_solution:
                debug_data = {
                    "instruction": gpt_solution.get("instruction"),
                    "task_type": gpt_solution.get("task_type"),
                    "interactive_elements": gpt_solution.get("interactive_elements", []),
                    "recommendation": gpt_solution.get("recommendation", {}),
                    "image_size": None
                }
                try:
                    from PIL import Image
                    img = Image.open(screenshot_path)
                    debug_data["image_size"] = img.size
                except:
                    pass
                with open(analysis_dir / "gpt_view_debug.json", "w", encoding="utf-8") as f:
                    json.dump(debug_data, f, ensure_ascii=False, indent=2)

                # –†–∏—Å—É–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É —Å –æ–±–ª–∞—Å—Ç—è–º–∏, –∫–∞–∫ –≤–∏–¥–∏—Ç GPT
                try:
                    from PIL import ImageDraw, ImageFont
                    img = Image.open(screenshot_path).convert('RGB')
                    draw = ImageDraw.Draw(img)
                    font = None
                    try:
                        font = ImageFont.truetype("arial.ttf", 18)
                    except:
                        font = ImageFont.load_default()

                    for element in gpt_solution.get("interactive_elements", []):
                        ex = element.get("x", 0)
                        ey = element.get("y", 0)
                        label = element.get("content", "?")
                        eid = element.get("id")
                        draw.ellipse((ex-8, ey-8, ex+8, ey+8), outline="red", width=2)
                        draw.text((ex+10, ey-10), f"#{eid}: {label}", fill="red", font=font)

                    for target in gpt_solution.get("recommendation", {}).get("target_ids", []):
                        for element in gpt_solution.get("interactive_elements", []):
                            if element.get("id") == target:
                                ex = element.get("x", 0)
                                ey = element.get("y", 0)
                                draw.ellipse((ex-15, ey-15, ex+15, ey+15), outline="lime", width=3)

                    img.save(analysis_dir / "gpt_view_overlay.png")
                except Exception as e:
                    print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å gpt overlay: {e}")
            
            if gpt_solution and "error" not in gpt_solution:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –∑–∞–¥–∞–Ω–∏—è –ü–ï–†–ï–î –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º
                instruction = gpt_solution.get("instruction", "").lower()
                
                if any(word in instruction for word in ["–ø–µ—Ä–µ—Ç–∞—â–∏", "–ø–µ—Ä–µ—Ç–∞—â–∏—Ç–µ", "drag", "–ø–µ—Ä–µ–º–µ—Å—Ç–∏"]):
                    print("üö´ –ó–∞–¥–∞–Ω–∏–µ –Ω–∞ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ - –∞–≤—Ç–æ–ø—Ä–æ–ø—É—Å–∫")
                    success = click_skip_button_smart(page)
                    if success:
                        print("‚úÖ –ó–∞–¥–∞–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏")
                    else:
                        print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–∂–∞—Ç—å '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'")
                else:
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º GPT –∞–Ω–∞–ª–∏–∑
                    gpt_analyzer.save_gpt_analysis(gpt_solution, str(screenshot_path))
                    
                    # –í—ã–ø–æ–ª–Ω—è–µ–º —Ä–µ—à–µ–Ω–∏–µ –æ—Ç GPT-4
                    success = execute_gpt_solution_smart(page, gpt_solution, str(screenshot_path), structure_info)
                
                if success:
                    print("üéâ GPT-4 —Ä–µ—à–∏–ª –∫–∞–ø—á—É!")
                    print("‚è≥ –ñ–¥–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞...")
                    page.wait_for_timeout(5000)
                else:
                    print("‚ö†Ô∏è GPT-4 —Ä–µ—à–µ–Ω–∏–µ –Ω–µ –≤—ã–ø–æ–ª–Ω–∏–ª–æ—Å—å")
            else:
                print("‚ùå GPT-4 –Ω–µ —Å–º–æ–≥ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å")
                if gpt_solution and "raw_response" in gpt_solution:
                    print(f"üìÑ –û—Ç–≤–µ—Ç GPT-4: {gpt_solution['raw_response'][:100]}...")
                else:
                    print("üí° –í–æ–∑–º–æ–∂–Ω–æ –ø—Ä–æ–±–ª–µ–º–∞ —Å API –∫–ª—é—á–æ–º –∏–ª–∏ –ª–∏–º–∏—Ç–∞–º–∏")
                    
        except ImportError:
            print("‚ùå GPT-4 –º–æ–¥—É–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install openai")
        except Exception as gpt_error:
            print(f"‚ùå –û—à–∏–±–∫–∞ GPT-4 —Å–∏—Å—Ç–µ–º—ã: {gpt_error}")
        
        print("\n‚ú® –ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞! –ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –±—Ä–∞—É–∑–µ—Ä–∞...")
        input()  # –û–∂–∏–¥–∞–µ–º –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        print("–£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ server.py –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 5000")
    finally:
        browser.close()


def capture_captcha():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞—Ö–≤–∞—Ç–∞ –∫–∞–ø—á–∏"""
    with sync_playwright() as playwright:
        run_captcha_automation(playwright)


if __name__ == "__main__":
    print("ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞—Ö–≤–∞—Ç hCaptcha + GPT-4 Vision")
    print("üìã –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ server.py –∑–∞–ø—É—â–µ–Ω –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º")
    print("üîë GPT-4 API –∫–ª—é—á –∑–∞—Ö–∞—Ä–¥–∫–æ–∂–µ–Ω –≤ gpt_analyzer.py")
    print()
    capture_captcha()
